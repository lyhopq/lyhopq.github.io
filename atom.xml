<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[沧海一粟]]></title>
  <subtitle><![CDATA[在知识的海洋中翱翔]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lyhopq.github.io//"/>
  <updated>2016-01-05T12:20:53.000Z</updated>
  <id>http://lyhopq.github.io//</id>
  
  <author>
    <name><![CDATA[Lyh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[《Effective Modern C++》条款3]]></title>
    <link href="http://lyhopq.github.io/%E3%80%8AEffective-Modern-C-%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://lyhopq.github.io/《Effective-Modern-C-》学习笔记3/</id>
    <published>2015-09-21T08:12:54.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="条款3：理解decltype(Understand_decltype)">条款3：理解<code>decltype</code>(Understand <code>decltype</code>)</h2><p><code>decltype</code>可以告诉你一个变量或一个表达式的类型。</p>
<h3 id="一般情况下，decltype返回的类型和你所给变量或表达式的类型一模一样">一般情况下，<code>decltype</code>返回的类型和你所给变量或表达式的类型一模一样</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">0</span>;          <span class="comment">// decltype(i) is const int</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> Widget&amp; w)</span></span>;  <span class="comment">// decltype(w) is const Widget&amp;</span></span><br><span class="line">                          <span class="comment">// decltype(f) is bool(const Widget&amp;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;                        <span class="comment">// decltype(Point::x) is int</span></span><br><span class="line">                          <span class="comment">// decltype(Point::y) is int</span></span><br><span class="line"></span><br><span class="line">Widget w;                 <span class="comment">// decltype(w) is Widget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(f(w)) ...              <span class="comment">// decltype(f(w)) is bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;      <span class="comment">// simplified version of std::vector</span></span><br><span class="line"><span class="keyword">class</span> <span class="built_in">vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> index);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;           <span class="comment">// decltype(v) is vector&lt;int&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>] == <span class="number">0</span>) ...       <span class="comment">// decltype(v[0]) is int&amp;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>在<code>C++11</code>中，<code>decltype</code>主要被用在那些其函数返回值依赖于其参数类型的函数模板声明中。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">authAndAccess</span><span class="params">(Container&amp; c, Index i)</span></span><br><span class="line">    -&gt; <span class="title">decltype</span><span class="params">(c[i])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    authenticateUser();</span><br><span class="line">    <span class="keyword">return</span> c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>C++14</code>中，所有的<code>lambda</code>和函数的返回类型都可以被推导（<code>C++11</code>只支持单语句的<code>lambda</code>的返回类型推导）。因此，在<code>C++14</code>中，上例可以被写为：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">authAndAccess</span><span class="params">(Container&amp; c, Index i)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    authenticateUser();</span><br><span class="line">    <span class="keyword">return</span> c[i];        <span class="comment">// 返回类型从c[i]中推导</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<a href="/《Effective-Modern-C++》学习笔记2">条款2</a>中说到，对函数返回值中的<code>auto</code>，编译器采用模板类型推导。对于大多数的容器来说，<code>c[i]</code>的类型为<code>T&amp;</code>，但根据<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中所述，在模板类型推导过程中，初始化表达式的常量性(&amp;)被忽略，则本例中<code>authAndAccess</code>函数的返回值就为<code>int</code>，而不是所期望的<code>int&amp;</code>。</p>
<p>为了使得<code>authAndAccess</code>函数所我们期望的一样，在<code>C++14</code>中，我们需要使用<code>decltype</code>类型推导来推导出其返回值类型。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>)</span><br><span class="line">authAndAccess(Container&amp; c, Index i)</span><br><span class="line">&#123;</span><br><span class="line">    authenticateUser();</span><br><span class="line">    <span class="keyword">return</span> c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>decltype(auto)</code>含义：<br>    <code>auto</code>指示类型需要被推导，<code>decltype</code>指示在类型推导过程中使用<code>decltype</code>的规则。</p>
<p>当你在初始化表达式中想要使用<code>decltype</code>推导规则时，可以使用<code>decltype(auto)</code>来声明变量。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget w;</span><br><span class="line"><span class="keyword">const</span> Widget&amp; cw = w;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> myWidget1 = cw;            <span class="comment">// auto类型推导：myWidget1的类型为Widget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) myWidget2 = cw;  <span class="comment">// decltype类型推导：myWidget2的类型为const Widget&amp;</span></span><br></pre></td></tr></table></figure>
<p>再来看一下，<code>authAndAccess</code>函数在<code>C++14</code>中的声明：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) authAndAccess(Container&amp; c, Index i);</span><br></pre></td></tr></table></figure>
<p>该函数只接受左值，而不接受右值（因为，右值不能绑定到一个非常量左值引用:<code>Container&amp;</code>）。为了让该函数既接受左值，又接受右值，一个方法是重载该函数（一个重载版本声明为左值引用参数，另一个重载版本声明为右值引用参数），但是这带来的缺点是：需要维护两个函数。另一种避免出现这种情况的方式是：使用<em>万能引用</em>，见<a href="/《Effective-Modern-C++》学习笔记24">条款24</a>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) authAndAccess(Container&amp;&amp; c,</span><br><span class="line">                             Index i);</span><br></pre></td></tr></table></figure>
<p>然而，根据<a href="/《Effective-Modern-C++》学习笔记25">条款25</a>，需要在万能引用上使用<code>std::forward</code>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>)</span><br><span class="line">authAndAccess(Container&amp;&amp; c, Index i)</span><br><span class="line">&#123;</span><br><span class="line">    authenticateUser();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;Container&gt;(c)[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同理，对于<code>C++11</code>，也要如此：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span></span><br><span class="line"><span class="title">authAndAccess</span><span class="params">(Container&amp;&amp; c, Index i)</span></span><br><span class="line">-&gt; <span class="title">decltype</span><span class="params">(<span class="built_in">std</span>::forward&lt;Container&gt;(c)</span>[i])</span><br><span class="line"></span>&#123;</span><br><span class="line">    authenticateUser();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;Container&gt;(c)[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="对于类型为T的左值表达式，decltype返回T&amp;">对于类型为<code>T</code>的左值表达式，<code>decltype</code>返回<code>T&amp;</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;  <span class="comment">// decltype(x) is int, decltype((x)) is int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) f1()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> x;  <span class="comment">// decltype(x) is int, so f1 return int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) f2()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (x);  <span class="comment">// decltype((x)) is int&amp;, so f1 return int&amp;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>f2</code>返回值是<code>int&amp;</code>，而且是局部变量的引用！<strong>小心该坑</strong></p>
<h3 id="要点：">要点：</h3><ul>
<li><code>decltype</code>几乎总是产生和变量或表达式一模一样的类型</li>
<li>对于类型为T的左值表达式，<code>decltype</code>返回的类型总是<code>T&amp;</code></li>
<li><code>C++14</code>支持<code>decltype(auto)</code>，像<code>auto</code>一样，从初始化对象中推导出类型，但是它使用<code>decltype</code>的规则进行推导</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="条款3：理解decltype(Understand_decltype)">条款3：理解<code>decltype</code>(Understand <code>decltype</code>)</h2><p><code>decltype</code>可以告诉你一个变量或一个表达式的类型。</p>
<h3 id="一般情况下，decltype返回的类型和你所给变量或表达式的类型一模一样">一般情况下，<code>decltype</code>返回的类型和你所给变量或表达式的类型一模一样</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">0</span>;          <span class="comment">// decltype(i) is const int</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> Widget&amp; w)</span></span>;  <span class="comment">// decltype(w) is const Widget&amp;</span></span><br><span class="line">                          <span class="comment">// decltype(f) is bool(const Widget&amp;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;                        <span class="comment">// decltype(Point::x) is int</span></span><br><span class="line">                          <span class="comment">// decltype(Point::y) is int</span></span><br><span class="line"></span><br><span class="line">Widget w;                 <span class="comment">// decltype(w) is Widget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(f(w)) ...              <span class="comment">// decltype(f(w)) is bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;      <span class="comment">// simplified version of std::vector</span></span><br><span class="line"><span class="keyword">class</span> <span class="built_in">vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> index);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;           <span class="comment">// decltype(v) is vector&lt;int&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>] == <span class="number">0</span>) ...       <span class="comment">// decltype(v[0]) is int&amp;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="C++11" scheme="http://lyhopq.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Effective Modern C++》条款2]]></title>
    <link href="http://lyhopq.github.io/%E3%80%8AEffective-Modern-C-%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://lyhopq.github.io/《Effective-Modern-C-》学习笔记2/</id>
    <published>2015-09-17T08:54:06.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="条款2：理解auto类型推导(Understand_auto_type_deduction)">条款2：理解<code>auto</code>类型推导(Understand <code>auto</code> type deduction)</h2><p>除了在一种情况下，<code>auto</code>类型推导和模板类型推导是一样的。</p>
<p>在<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中，使用以下统一的函数模板：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ParamType param)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>和统一调用方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(expr);</span><br></pre></td></tr></table></figure></p>
<p>在函数是<code>f</code>的调用过程中，编译器使用<code>expr</code>来推断<code>T</code>和<code>ParamType</code>。</p>
<p>当一个<strong>变量</strong>使用<code>auto</code>来声明时，<code>auto</code>扮演了模板中<code>T</code>的角色，且该<strong>变量</strong>的类型说明符扮演了<code>ParamType</code>的角色。因此，同<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中一样，根据<strong>变量</strong>的类型说明符的形式分三种情况：</p>
<ul>
<li>情况1：类型说明符是一个引用或指针，但不是一个万能引用(Universal Reference)</li>
<li>情况2：类型说明符是一个万能引用(Universal Reference)</li>
<li>情况3：类型说明符既不是指针也不是引用</li>
</ul>
<a id="more"></a>
<p>这三种情况于<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中的三种情况一一对应。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">27</span>;           <span class="comment">// x is int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> cx = x;     <span class="comment">// cx is const int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span>&amp; rx = x;    <span class="comment">// rx is const int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; uref1 = x;      <span class="comment">// uref1 is int&amp;</span></span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; uref2 = cx;     <span class="comment">// uref2 is const int&amp;</span></span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; uref3 = <span class="number">27</span>;     <span class="comment">// uref3 is int&amp;&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"R. N. Briggs"</span>;</span><br><span class="line"><span class="keyword">auto</span> arr1 = name;      <span class="comment">// const char*</span></span><br><span class="line"><span class="keyword">auto</span>&amp; arr2 = name;     <span class="comment">// const char (&amp;)[13]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunc</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> func1 = someFunc;   <span class="comment">// void (*)(int, double)</span></span><br><span class="line"><span class="keyword">auto</span>&amp; func2 = someFunc;  <span class="comment">// void (&amp;)(int, double)</span></span><br></pre></td></tr></table></figure>
<p><strong><code>auto</code>类型推导和模板类型推导的不同之处在于：</strong><br>    如果一个<code>auto</code>声明的变量使用<em>花括号初始化</em>，其推断的类型是一个<code>std::initializer_list</code>的实例（模板实例）。但，如果把该<em>花括号初始化</em>传入到相应的模板中，类型推断将会失败，代码不会通过编译。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = &#123;<span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span>&#125;;   <span class="comment">// x is std::initializer_list&lt;int&gt;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// auto x&#123;11, 23, 9&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T param)</span></span>;</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span>&#125;)         <span class="comment">// 错误，不能推断出T</span></span><br></pre></td></tr></table></figure>
<p>不过，可以指定模板的<code>param</code>是一个<code>std::initializer_list&lt;T&gt;</code>，模板类型推断就能推断出<code>T</code>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">std</span>::initializer_list&lt;T&gt; initList)</span></span>;</span><br><span class="line"></span><br><span class="line">f(&#123;<span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span>&#125;);  <span class="comment">// T is int</span></span><br></pre></td></tr></table></figure>
<p><strong>对于<code>C++14</code>，还有一点应该注意的是：</strong><br>    <code>auto</code>作为函数返回值和<code>lambda</code>的参数声明时，应该使用模板类型推导，而不是<code>auto</code>类型推导。因此，下面的示例将不会通过编译。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">createInitList</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">auto</span> resetV =</span><br><span class="line">    [&amp;v](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; newValue) &#123;v = newValue;&#125;;</span><br><span class="line">resetV(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="要点：">要点：</h3><ul>
<li>通常情况下，<code>auto</code>类型推导和模板类型推导是一样的，但是<code>auto</code>类型推导假定<em>花括号初始化</em>代表一个<code>std::initializer_list</code>，而模板类型推导不会这样做。</li>
<li>在函数返回值或<code>lambda</code>参数中的<code>auto</code>意味着模板类型推导，而不是<code>auto</code>类型推导。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="条款2：理解auto类型推导(Understand_auto_type_deduction)">条款2：理解<code>auto</code>类型推导(Understand <code>auto</code> type deduction)</h2><p>除了在一种情况下，<code>auto</code>类型推导和模板类型推导是一样的。</p>
<p>在<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中，使用以下统一的函数模板：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ParamType param)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>和统一调用方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(expr);</span><br></pre></td></tr></table></figure></p>
<p>在函数是<code>f</code>的调用过程中，编译器使用<code>expr</code>来推断<code>T</code>和<code>ParamType</code>。</p>
<p>当一个<strong>变量</strong>使用<code>auto</code>来声明时，<code>auto</code>扮演了模板中<code>T</code>的角色，且该<strong>变量</strong>的类型说明符扮演了<code>ParamType</code>的角色。因此，同<a href="/《Effective-Modern-C++》学习笔记1">条款1</a>中一样，根据<strong>变量</strong>的类型说明符的形式分三种情况：</p>
<ul>
<li>情况1：类型说明符是一个引用或指针，但不是一个万能引用(Universal Reference)</li>
<li>情况2：类型说明符是一个万能引用(Universal Reference)</li>
<li>情况3：类型说明符既不是指针也不是引用</li>
</ul>]]>
    
    </summary>
    
      <category term="C++11" scheme="http://lyhopq.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Effective Modern C++》条款1]]></title>
    <link href="http://lyhopq.github.io/%E3%80%8AEffective-Modern-C-%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://lyhopq.github.io/《Effective-Modern-C-》学习笔记1/</id>
    <published>2015-09-14T12:57:12.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="条款1：理解模板类型推导(Understand_template_type_deduction)">条款1：理解模板类型推导(Understand template type deduction)</h2><p>模板的类型推导是现代<code>C++</code>最引人注目的特性之一<code>auto</code>的基础，因此要真正理解模板类型推导的各个方面。</p>
<p>函数模板：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ParamType param)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>调用方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(expr);  <span class="comment">// call f with some expression</span></span><br></pre></td></tr></table></figure></p>
<p>在编译过程中，编译器使用<code>expr</code>来推导两个类型：<code>T</code>、<code>ParamType</code>。被推导出的<code>T</code>的类型不仅取决于<code>expr</code>的类型，还取决于<code>ParamType</code>的形式。有三种情形：</p>
<a id="more"></a>
<ul>
<li><p>情况1：<code>ParamType</code>是一个引用或指针，但不是一个万能引用(Universal Reference)</p>
<p>类型推导的工作方式如下：</p>
<ol>
<li>忽略<code>expr</code>的类型的引用或指针部分（即去掉<code>&amp;</code>或<code>*</code>）</li>
<li>然后，模式匹配<code>expr</code>的类型和<code>ParamType</code>来获得<code>T</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp; param)</span></span>;    <span class="comment">// param is a reference</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * ptrToName = name;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"J. P. Briggs"</span>; <span class="comment">// 数组衰变成指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunc</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>)</span></span>;  <span class="comment">// 函数类型会衰变成函数指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f(x);    <span class="comment">// T is int, param's type is int&amp;</span></span><br><span class="line">f(cx);   <span class="comment">// T is const int, param's type is const int&amp;</span></span><br><span class="line">f(rx);   <span class="comment">// T is const int, param's type is const int&amp;</span></span><br><span class="line"></span><br><span class="line">f(name); <span class="comment">// T is const char[13], param's type is const char (&amp;)[13]</span></span><br><span class="line"></span><br><span class="line">f(someFunc); <span class="comment">// T is void (*)(int, double)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp; param)</span></span>;   <span class="comment">// param is now a ref-to-const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x;</span><br><span class="line"></span><br><span class="line">f(x);     <span class="comment">// T is int, param's type is const int&amp;</span></span><br><span class="line">f(cx);    <span class="comment">// T is int, param's type is const int&amp;</span></span><br><span class="line">f(rx);    <span class="comment">// T is int, param's type is const int&amp;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>情况2：<code>ParamType</code>是一个万能引用(Universal Reference)</p>
<ul>
<li>如果<code>expr</code>是一个左值(lvalue)，<code>T</code>和<code>ParamType</code>都被推导成左值引用。</li>
<li>如果<code>expr</code>是一个右值(rvalue)，使用一般的推导规则（情况1中所示）。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span></span>;    <span class="comment">// param is now a unicersal reference</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rc = x;</span><br><span class="line"></span><br><span class="line">f(x);   <span class="comment">// x is lvalue, so T and param's type are both int&amp; </span></span><br><span class="line">f(cx);  <span class="comment">// cs is lvalue, so T and param's type are both const int&amp;</span></span><br><span class="line">f(rx);  <span class="comment">// rc is lvalue, so T and param's type as both const int&amp;</span></span><br><span class="line">f(<span class="number">27</span>);  <span class="comment">// 27 is rvalue, so T is int, param's type is int&amp;&amp;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>情况3：<code>ParamType</code>既不是指针也不是引用</p>
<p>这种情况下，进行的是按值传递。按值传递会拷贝一个全新的对象，该对象会忽略<code>expr</code>的修饰符（<code>const</code>和<code>volatile</code>)。其推导方式如下：</p>
<ol>
<li>忽略<code>expr</code>类型的引用部分</li>
<li>忽略<code>expr</code>类型的<code>const</code>或<code>volatile</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T param)</span></span>;     <span class="comment">// param is passed by value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> ptr = <span class="string">"Fun with pointers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * ptrToName = name;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"J. P. Briggs"</span>; <span class="comment">// 数组衰变成指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunc</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>)</span></span>;  <span class="comment">// 函数类型会衰变成函数指针</span></span><br><span class="line"></span><br><span class="line">f(x);    <span class="comment">// T is int</span></span><br><span class="line">f(cx);   <span class="comment">// T is int</span></span><br><span class="line">f(rx);   <span class="comment">// T is int</span></span><br><span class="line">f(ptr);  <span class="comment">// T is const char*</span></span><br><span class="line"></span><br><span class="line">f(name); <span class="comment">// T is const char*</span></span><br><span class="line"></span><br><span class="line">f(someFunc); <span class="comment">// T is void (&amp;)(int, double)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="要点：">要点：</h3><ul>
<li>在模板类型推导过程中，引用实参的引用性被忽略</li>
<li>对万能引用(universal reference)参数进行类型推导时，左值实参产生左值引用，右值实参产生右值引用</li>
<li>对按值传递的参数进行类型推导时，忽略实参的<code>const</code>和/或<code>volatile</code>修饰符</li>
<li>对按值传递的参数进行类型推导时，数组和函数实参将退化为指针</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="条款1：理解模板类型推导(Understand_template_type_deduction)">条款1：理解模板类型推导(Understand template type deduction)</h2><p>模板的类型推导是现代<code>C++</code>最引人注目的特性之一<code>auto</code>的基础，因此要真正理解模板类型推导的各个方面。</p>
<p>函数模板：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ParamType param)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>调用方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(expr);  <span class="comment">// call f with some expression</span></span><br></pre></td></tr></table></figure></p>
<p>在编译过程中，编译器使用<code>expr</code>来推导两个类型：<code>T</code>、<code>ParamType</code>。被推导出的<code>T</code>的类型不仅取决于<code>expr</code>的类型，还取决于<code>ParamType</code>的形式。有三种情形：</p>]]>
    
    </summary>
    
      <category term="C++11" scheme="http://lyhopq.github.io/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PEP 0008 -- Python代码风格指南]]></title>
    <link href="http://lyhopq.github.io/PEP-0008-Python%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://lyhopq.github.io/PEP-0008-Python代码风格指南/</id>
    <published>2015-09-11T14:50:21.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<p>译自：<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">https://www.python.org/dev/peps/pep-0008/</a></p>
<table>
<thead>
<tr>
<th>PEP:</th>
<th>8</th>
</tr>
</thead>
<tbody>
<tr>
<td>Title:</td>
<td>Style Guide for Python Code</td>
</tr>
<tr>
<td>Author:</td>
<td>Guido van Rossum <guido at="" python.org="">, Barry Warsaw <barry at="" python.org="">, Nick Coghlan <ncoghlan at="" gmail.com=""></ncoghlan></barry></guido></td>
</tr>
<tr>
<td>Status:</td>
<td>Active</td>
</tr>
<tr>
<td>Type:</td>
<td>Process</td>
</tr>
<tr>
<td>Created:</td>
<td>05-Jul-2001</td>
</tr>
<tr>
<td>Post-History:</td>
<td>05-Jul-2001, 01-Aug-2013</td>
</tr>
</tbody>
</table>
<h2 id="介绍">介绍</h2><p>本文对<code>Python</code>的主要发行版本的标准库代码给出了编码约定。关于<code>Python</code>的<code>C</code>实现中的<code>C</code>风格指南请见相关的PEP<a href="#id1">[1]</a>。 </p>
<p>本文和<a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="external">PEP 257</a>（<code>文档字符串约定</code>）改编于<code>Guido</code>最初的<code>Python</code>风格指南文章，并从<code>Barry</code>的风格指南中汲取了一些内容<a href="#id2">[2]</a>。</p>
<p>因为语言本身的变化，本风格指南也随着时间的推移而演变，更多的约定被发现，过时的约定被淘汰。</p>
<p>许多的项目有他们自己的编码风格指南。如果和本指南发生了冲突，项目应该居先考虑项目特定的指南。</p>
<a id="more"></a>
<h2 id="愚蠢的一致性是无知者的心魔">愚蠢的一致性是无知者的心魔</h2><p><code>Guido</code>的一个核心见解是：<strong>相对于被编写，代码更多的是被阅读。</strong>本指南的目的是改善代码的可读性和使广泛的<code>Python</code>代码具有一致性。正如<a href="https://www.python.org/dev/peps/pep-0020" target="_blank" rel="external">PEP 20</a>所说：“可读性应当被重视”。</p>
<p>风格指南关乎一致性。本风格指南所描述的一致性是重要的，而一个项目内部的一致性更重要，一个模块或函数内的一致性最重要。</p>
<p>但最最重要的是：知道什么时候去打破一致性——风格指南并不总是适用的。不能确定时，使用你最好的抉择。看看其它的例子，决定什么看起来最好。并要不耻下问！</p>
<p>特别注意：不要仅仅为了遵守本<code>PEP</code>而打破代码的向后兼容性！</p>
<p>当出现以下情况时，也是忽略本指南某个约定的好理由：</p>
<ol>
<li>当应用指南会降低代码的易读性时，即使是对于那些使用本指南来阅读代码的人。</li>
<li>为了和周围的没有遵守本指南的代码（也许是历史原因）保持一致性 —— 虽然这也是一个清除其他人所造成的混乱的时机（真正的<code>XP</code>风格）。</li>
<li>由于有问题的代码早于本指南的引入，并且当前没有其它的原因来修改这一代码时。</li>
<li>当代码需要和较老版本的<code>Python</code>保存兼容，而该版本的<code>Python</code>不支持本指针所建议的特性。</li>
</ol>
<h2 id="代码布局">代码布局</h2><h3 id="缩进">缩进</h3><p>每一个缩进层次使用4个空格。</p>
<p>续行(Continuation lines)应该和其它元素对齐，要么在垂直方向上使用<code>Python</code>的括号内（圆括号、方括号和花括号）的隐式行连接特性进行对齐，要么使用<a href="#id5">悬挂式缩进</a>。使用悬挂式缩进时应该遵守这些注意事项：第一行不能有参数、应该使用进一步的缩进使续行和其它行区分开来。</p>
<p>Yes:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在开始分隔符上对齐</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用进一步的缩进使之和其它行区分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 悬挂式缩进应该增加一个缩进层次</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br></pre></td></tr></table></figure></p>
<p>No:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不使用垂直对齐时，第一行禁止写参数</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要进一步的缩进，因为当前缩进不能区分代码层次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span><br><span class="line">    var_one, var_two, var_three,</span><br><span class="line">    var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure></p>
<p>对于续行，4个空格的规则是可选的。</p>
<p>Optional:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 悬挂式缩进*可以*使用4个空格以外的其它缩进方式</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br></pre></td></tr></table></figure></p>
<p>值得注意的是，当<span id="multiline-if-statements"><code>if</code>语句</span>的条件部分太长，要被写在多行的时候，由两个字符的关键字（即<code>if</code>），加之一个空格和一个开始括号就为多行条件语句的后续行形成了一个天然的4个空格的缩进。这就与<code>if</code>语句里面的代码块的缩进（也是自然的缩进4个空格）产生了视觉上的冲突。本<code>PEP</code>没有明确的立场关于如何（或是否）采取进一步的措施来把这些条件行和<code>if</code>语句的嵌套代码快区分开来。在这种情况下可以接受的选择包括，但不限于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有额外的缩进</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个注释，这会在支持语法高亮的编辑器中提供一些区别</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    <span class="comment"># Since both conditions are true, we can frobnicate.</span></span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在条件续行上添加额外的缩进</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">        <span class="keyword">and</span> that_is_another_thing):</span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure>
<p>在多行结构中的结尾花括号/方括号/小括号应该放在多行列的最后一行的第一个非空字符的正下方，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">    ]</span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>或者，应该放在多行结构的起始行的第一个字符的正下方，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="制表符还是空格？">制表符还是空格？</h3><p>空格是首选的缩进方式。</p>
<p>只有在同已经使用制表符缩进的代码保持一致性的时候才可以使用制表符。</p>
<p><code>Python3</code>不允许混合使用制表符和空格作为缩进。</p>
<p><code>Python2</code>中混合使用制表符和空格做为缩进的代码应该转换为只使用空格。</p>
<p>当使用<code>-t</code>选项调用<code>Python2</code>命令行解释器时，对混合使用制表符和空格的代码会报出警告。使用<code>-tt</code>选项时这些警告会变成错误。强烈建议使用这些选项！</p>
<h3 id="单行最大长度">单行最大长度</h3><p>限制所有行的最大长度为79个字节。</p>
<p>对于那些具有很少结构约束的长代码块（文档字符串和注释）来说，单行长度应该限制在72字节。</p>
<p>限制所需要的编辑器窗口的宽度使得并排编辑多个文件成为可能，而且能够使用代码评审工具在相邻的列中呈现两个版本。</p>
<p>在大多数编辑器中使用的默认折叠(wrapping)会扰乱代码的视觉结构，使得代码更难以理解。这里选择的长度限制以避免在那些窗口宽度被设置成80的编辑器中折叠代码，即使这些工具在折叠代码时会在最后一列放置了一个图像符号标记。一些基于网络的工具根本就不能提供动态的代码行折叠功能。</p>
<p>一些团队强烈的倾向于较长的代码行长度。对那些专门或主要的由一个团队维护的代码，可以在这个问题上达成协议，可以把名义上的代码行长度从80增加到100字符（有效地增加最大长度到99字符），前提是注释和文档字符串仍然保存72字符的最大长度。</p>
<p><code>Python</code>标准库采用保守策略，限制行长度为79字符（并且文档字符串/注释为72字符）。</p>
<p>折叠长代码行的首选方式是使用<code>Python</code>支持的圆括号、方括号和花括号内部的隐式行延续特性。在括号内，长代码行能够被打断成多行。相比于使用反斜杠进行行延续，这一特性应该被优先使用。</p>
<p>反斜杠有时可能仍然是适合的。例如，长的<code>with</code>语句不能使用隐式续行，因此反斜杠是可接受的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</span><br><span class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:</span><br><span class="line">    file_2.write(file_1.read())</span><br></pre></td></tr></table></figure>
<p>（见前面有关<a href="#multiline-if-statements">多行if语句</a>的讨论，对于这样的多行<code>with</code>语句需要进一步的思考。）</p>
<p>另一个这样的案例是<code>assert</code>语句。</p>
<p>确保后续行有适当的缩进。二元操作符的断行首选位置是在操作符之后，而不是之前。一些例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span><span class="params">(Blob)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height,</span><br><span class="line">                 color=<span class="string">'black'</span>, emphasis=None, highlight=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">                color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span> <span class="keyword">or</span></span><br><span class="line">                highlight &gt; <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"sorry, you lose"</span>)</span><br><span class="line">        <span class="keyword">if</span> width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span> (color == <span class="string">'red'</span> <span class="keyword">or</span></span><br><span class="line">                                           emphasis <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"I don't think so -- values are %s, %s"</span> %</span><br><span class="line">                             (width, height))</span><br><span class="line">        Blob.__init__(self, width, height,</span><br><span class="line">                      color, emphasis, highlight)</span><br></pre></td></tr></table></figure>
<h3 id="空行">空行</h3><p>用两个空行分割顶层函数和类定义。</p>
<p>使用一个空行分割类中的方法定义。</p>
<p>使用额外的空行（不要太多）来分割相关的函数组。在一组相关的单行程序（例如，一组哑实现(dummy implementations)）间的空行是可以省略的。</p>
<p>保守的，在函数内使用空行，来指示逻辑部分。</p>
<p><code>Python</code>把<code>Control-L</code>（即<code>^L</code>）换页符作为空格；许多工具把这些字符作为分页符，因此在你的文件中，可以使用它把相关部分分页。注意，一些编辑器和基于网络的代码浏览器可能不会把<code>Control-L</code>识别为换页，并在这个位置显示为一个图像符号。</p>
<h3 id="源文件编码">源文件编码</h3><p><code>Python</code>发布的核心代码应该总是使用<code>UTF-8</code>（或者在<code>Python2</code>中是<code>ASCII</code>）编码。<br>使用<code>ASCII</code>（在<code>Python2</code>中）或<code>UTF-8</code>（在<code>Python3</code>中）编码的文件不应该有编码声明(encoding declaration)。</p>
<p>在标准库中，非默认编码应该仅用于测试或当注释或文档字符串中需要提及作者的名字，而该名字包含非<code>ASCII</code>字符时；否则，使用<code>\x</code>，<code>\u</code>，<code>\U</code>或<code>\N</code>等转义符在字符串字面值中包含非<code>ASCII</code>数据是首选的方式。</p>
<p>对于<code>Python3.0</code>和以后版本，在标准库中使用了以下策略（见<a href="https://www.python.org/dev/peps/pep-3131" target="_blank" rel="external">PEP 3131</a>）：所有的标识符<strong>必须</strong>是<code>ASCII</code>标识符，只要切实可行都<strong>应该</strong>使用英语单词（在许多情况下，使用的缩写和技术术语不是英语单词）。此外，字符串字面值和注释必须也是<code>ASCII</code>的。唯一的例外是：(a)测试非<code>ASCII</code>特性的测试用例，和(b)作者的名字。那些不是基于拉丁字母的作者名字<strong>必须</strong>提供一个拉丁的英译。</p>
<p>推荐那些具有全球视野的开源项目采用类似的策略。</p>
<h3 id="导入">导入</h3><ul>
<li><p>导入通常应该在单独的行中，例如：<br>符合规范的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure>
<p>不符合规范的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure>
<p>不过这样的导入也是可以的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入应该总是放在文件的顶部，在模块的注释和文档字符串之后，在模块全局变量和常量之前。</p>
<p>导入应该使用下面的顺序进行分组：</p>
<ol>
<li>导入标准库</li>
<li>导入相关的第三方库</li>
<li>导入相关的本地应用程序/库</li>
</ol>
<p>你应该在每组导入之间放置一个空行。</p>
<p>任何相关的<code>__all__</code>规格放在导入之后。</p>
</li>
<li><p>推荐使用绝对路径导入，因为它们通常会更可读，而且在导入系统没有被正确配置的情况下（例如，一个包内的目录恰好在<code>sys.path</code>中）具有更好的表现（或至少能够给出更好的错误信息）:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mypkg.sibling</span><br><span class="line"><span class="keyword">from</span> mypkg <span class="keyword">import</span> sibling</span><br><span class="line"><span class="keyword">from</span> mypkg.sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure>
<p>然而，在有些时候，显示的相对导入是绝对导入可接受的替代，特别是在应对复杂的包结构时绝对导入会出现不必要的繁琐的情况下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sibling</span><br><span class="line"><span class="keyword">from</span> .sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure>
<p>标准库的代码应该避免复杂的包结构，因此总是使用绝对导入。</p>
<p>不应该使用隐式的相对导入，并且<code>Python3</code>已经去掉了对它的支持。</p>
</li>
<li><p>当从一个包含类的模块中导入类时，这样写通常是合理的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass</span><br><span class="line"><span class="keyword">from</span> foo.bar.yourclass <span class="keyword">import</span> YourClass</span><br></pre></td></tr></table></figure>
<p>若果这样写会引起本地名字冲突，就使用下面的方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myclass</span><br><span class="line"><span class="keyword">import</span> foo.bar.yourclass</span><br></pre></td></tr></table></figure>
<p>并且使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”这样的方式来引用。</p>
</li>
<li><p>应该禁止使用通配符导入（<code>from &lt;module&gt; import *</code>）。因为，这将导致哪些名字存在命名空间中变得不清晰，迷惑读者和许多自动化工具。不过，有一个能站得住脚的使用通配符导入的案例是：为了重新发布一个内部的接口作为公共<code>API</code>的一部分（例如，使用纯<code>Python</code>来重写一个可选的加速模块所定义的接口，但你不能事先确定到底哪些接口会被重写）。</p>
<p>当以这样的方式重新发布命名时，还应该遵守本指针中有关公有和内部接口的规范。</p>
</li>
</ul>
<h2 id="字符串的引号">字符串的引号</h2><p>在<code>Python</code>中，单引号字符串和双引号字符串是相同的。本<code>PEP</code>并不对其做出建议，选择一个规则，坚持下去就可以了。然而，当字符串本身包含单引号或双引号时，应该使用另一个引号来避免在字符串中使用反斜杠。这会改善可读性。</p>
<p>对于三个引号的字符串，总是使用双引号，与在<a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="external">PEP 257</a>所约定的文档字符串规范保持一致。</p>
<h2 id="表达式和语句中的空格">表达式和语句中的空格</h2><h3 id="通病">通病</h3><p>在以下的情况种避免额外的空格：</p>
<ul>
<li><p>紧接着圆括号、方括号或花括号内部</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure>
</li>
<li><p>逗号、分号或冒号之前：</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> : <span class="keyword">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>
</li>
<li><p>然而，在slice（切片）中，冒号就像一个二元操作符，并且在它的两侧应该有相等数量的操作数（把它当做最低优先级的操作符）。在扩展slice中，两个冒号必须具有相等数量的空格。例外：当slice的某个参数被省略了，那么其相应的空格也应该被省略。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[lower:upper], ham[lower:upper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ham[lower + offset:upper + offset]</span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>]</span><br><span class="line">ham[lower : : upper]</span><br><span class="line">ham[ : upper]</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用参数列表的开始括号之前:</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>索引或切片的开始括号之前：</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dct[<span class="string">'key'</span>] = lst[index]</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dct [<span class="string">'key'</span>] = lst [index]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在赋值（或其它）操作符两侧，多余一个的，用于和其它操作符对齐为目的空格：</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x             = <span class="number">1</span></span><br><span class="line">y             = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其它建议">其它建议</h3><ul>
<li><p>总是在这些二元操作符两侧使用一个空格：赋值（=），参数赋值（+=、-= 等等），比较（==、&lt;、&gt;、!=、&lt;&gt;、&lt;=、&gt;=、in、not in、is、is not），布尔（and、or、not）。</p>
</li>
<li><p>如果使用了不同优先级的操作符，考虑在最低优先级的操作符两侧加上空格。请自行判断，无论怎样，绝不要使用多余一个空格，并且使得二元操作符两侧具有相同数量的空格。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span></span><br><span class="line">submitted += <span class="number">1</span></span><br><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x*x + y*y</span><br><span class="line">c = (a+b) * (a-b)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=i+<span class="number">1</span></span><br><span class="line">submitted +=<span class="number">1</span></span><br><span class="line">x = x * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x * x + y * y</span><br><span class="line">c = (a + b) * (a - b)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在关键字参数或默认参数中的<code>=</code>号两侧不要出现空格。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在带注解的函数定义中的<code>=</code>号两侧使用空格。此外，在<code>:</code>号之后使用一个空格，以及在<code>-&gt;</code>号两侧各使用一个空格，代表一个注解的返回值。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(sep: AnyStr = None)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; <span class="title">AnyStr</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr, sep: AnyStr = None, limit=<span class="number">1000</span>)</span>:</span></span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr=None)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input:AnyStr)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr)</span>-&gt;<span class="title">PosInt</span>:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不建议使用符合语句（同一行中有多条语句）。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line">do_one()</span><br><span class="line">do_two()</span><br><span class="line">do_three()</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line">do_one(); do_two(); do_three()</span><br></pre></td></tr></table></figure>
</li>
<li><p>虽然有时把较短的<code>if/for/while</code>语句放在一行也是可以的，但决不能把它运用到多字句的语句中。这样也是为了避免折叠长行。</p>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst: total += x</span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">10</span>: t = delay()</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">else</span>: do_non_blah_thing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: something()</span><br><span class="line"><span class="keyword">finally</span>: cleanup()</span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(long, argument,</span><br><span class="line">                             list, like, this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: one(); two(); three()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="注释">注释</h2><p>与代码相矛盾的注释，还不如没有注释。总是保持注释随着代码同步更新！</p>
<p>注释应该是完整的句子。如果注释是一个短语或句子，它的第一个单词的首字母应该大写，除非第一个单词是一个以小写字母开头的标识符（绝不要改变标识符的大小写！）。</p>
<p>如果一个注释很短，结尾的句点就可以省略。块注释通常由完整的句子建立起的多个段落组成，并且每个句子都应该以句点结束。</p>
<p>你应该在句子结束的句点后面使用两个空格。</p>
<p>当撰写英文注释时，参考《The Elements of Style》(Strunk and White)。</p>
<p>来自于非英语国家的<code>Python</code>程序员：请使用英语写你的注释，除非你120%的确定你写的代码绝不会被不懂得你的语言的人阅读。</p>
<h3 id="块注释">块注释</h3><p>块注释通常都是用来阐述跟随其后的代码的，并和该代码具有相同的缩进层次。块注释的每一行都以<code>#</code>和一个空格开始（除非在注释内部有文本缩进）。</p>
<p>块注释中的段落以只包含一个<code>#</code>的行隔开。</p>
<h3 id="行内注释">行内注释</h3><p>尽量少的使用行内注释。</p>
<p>行内注释就是同语句在同一行内的注释，应该使用至少两个空格同语句隔开，以一个<code>#</code>和空格开始。</p>
<p>如果行内注释所表述的含义及其明显，那么它就是多余的，而且还会分散读者的注意力。不要撰写这样的注释：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x + <span class="number">1</span>                 <span class="comment"># Increment x</span></span><br></pre></td></tr></table></figure>
<p>但有些时候，行内注释也是有用的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x + <span class="number">1</span>                 <span class="comment"># Compensate for border</span></span><br></pre></td></tr></table></figure>
<h3 id="文档字符串">文档字符串</h3><p>关于编写好的文档字符串（亦称 “docstrings”）的约定请参见<a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="external">PEP 257</a>。</p>
<ul>
<li><p>为所有的公共模块、函数、类和方法撰写文档字符串。对于非公共方法，文档字符串是没有必要的，但你应该使用注释来描述该方法的用途，并且注释应该在<code>def</code>行之后。</p>
</li>
<li><p><a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="external">PEP 257</a> 描述了好的文档字符串的约定。注意，最重要的是，多行文档字符串结尾的<code>&quot;&quot;&quot;</code>应该单独放在一行，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Return a foobang</span><br><span class="line"></span><br><span class="line">Optional plotz says to frobnicate the bizbaz first.</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于单行的文档字符串，请保持结束的<code>&quot;&quot;&quot;</code>在同一行上。</p>
</li>
</ul>
<h2 id="版本注记">版本注记</h2><p>如果在你的源文件中有<code>Subversion</code>、<code>CVS</code>或<code>RCS</code>等版本更新记录，像下面这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__version__ = <span class="string">"$Revision$"</span></span><br><span class="line"><span class="comment"># $Source$</span></span><br></pre></td></tr></table></figure>
<p>以上这些内容应该放在模块的文档字符串后面，代码之前，以一个空行分割其前后。</p>
<h2 id="命名约定">命名约定</h2><p><code>Python</code>库中的命名约定有些混乱，我们永远不能使之完全一致 —— 不过，本指南里的是当前推荐的命名标准。新的模块和包（包括第三方框架）应该使用该标准编写，但如果一个已存在的库有不同的风格时，保持内部一致性是首选。</p>
<h3 id="最重要的原则">最重要的原则</h3><p>作为公共<code>API</code>的一部分，用户可见的名字应该遵守这一约定：名字反映功能而不是实现。</p>
<h3 id="描述：命名风格">描述：命名风格</h3><p>有许多中不同的命名风格。独立于它们的用途，识别使用了什么命名风格是有帮助的。</p>
<p>下面是一些著名的命名风格：</p>
<ul>
<li>b（单一小写字母）</li>
<li>B（单一大写字母）</li>
<li>lowercase</li>
<li>lower_case_with_underscores</li>
<li>UPPERCASE</li>
<li>UPPER_CASE_WITH_UNDERSCORES</li>
<li>CapitalizedWords(or CapWords, or CamelCase — 命名得自于其字母崎岖的形状<a href="#id3">[3]</a>).<br>有时也被称作<code>StudlyCaps</code>。<br>注意：在<code>CapWords</code>中使用缩写时，缩写都使用大写字母。因此<code>HTTPServerError</code>好于<code>HttpServerError</code>。</li>
<li>mixedCase(与<code>CapitalizedWords</code>不同的是，其首字母小写！)</li>
<li>Capitalized_Words_With_Underscores (丑陋的！)</li>
</ul>
<p>还有的风格是使用一个简短的唯一的前缀来把相关的名字分组。这种风格在<code>Python</code>中使用的不多，但为了完整性还是提及一下。例如，<code>os.stat()</code>函数返回一个元组(tuple)，其成员传统上的命名方式如同<code>st_mode</code>、<code>st_size</code>、<code>st_mtime</code>等等。（这样做是为了强调其对应于<code>POSIX</code>系统调用的结构体成员，这有助于程序员熟悉其使用方式。）</p>
<p><code>X11</code>库的所有公共函数都使用一个<code>X</code>作为开始。在<code>Python</code>中，这一风格被认为是不必要的，因为属性和方法名都以对象为前缀，而函数名以模块名为前缀。</p>
<p>此外，在下面的特殊形式中使用下划线作为前缀或后缀是被公认的（它们通常与以上形式的风格一起使用）：</p>
<ul>
<li><code>_single_leading_underscore</code>：弱“内部使用”指示。例如，<code>from M import *</code>不会导入以一个下划线开始的名字。</li>
<li><p><code>single_trailing_underscore_</code>：约定使用这样的方式来避免和<code>Python</code>关键字冲突，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tkinter.Toplevel(master, class_=<span class="string">'ClassName'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>__double_leading_underscore</code>：当用于命名一个类的属性时，会触发名字碾压(<code>name mangling</code>)机制（在类<code>FooBar</code>内，<code>__boo</code>将变成<code>_FooBar__boo</code>）</p>
</li>
<li><code>__double_leading_and_trailing_underscore__</code>：驻留在用户可以控制的命名空间内的“魔法”对象或属性。例如，<code>__init__</code>、<code>__import__</code>或<code>__file__</code>。不要创造这样的名字，只是使用它们。</li>
</ul>
<h3 id="规定：命名约定">规定：命名约定</h3><h4 id="避免使用的命名">避免使用的命名</h4><p>不要使用字符<code>&#39;l&#39;</code>(小写字母<code>el</code>)，<code>&#39;O&#39;</code>（大写字母<code>oh</code>）或<code>&#39;I&#39;</code>（大写字母<code>eye</code>）作为单字符变量名。</p>
<p>在一些字体里，这些字符和数字1和0难以区分。需要临时使用<code>&#39;l&#39;</code>的时候，使用<code>&#39;L&#39;</code>代替。</p>
<h4 id="包和模块的命名">包和模块的命名</h4><p>模块应该使用简短的、都小写的名字。在模块名中可以使用下划线，如果它可以提高可读性的话。<code>Python</code>包也应该使用简短的、都小写的名字，然而，并不提倡使用下划线。</p>
<p>因为模块名映射为文件名，而一些文件系统不区分大小写且会截断长的文件名，因此为模块名选择相当短的名字是很重要的 —— 这在<code>Unix</code>系统中并不存在问题，但当把代码搬运到老版本的<code>Mac</code>或<code>Windows</code>或<code>DOS</code>系统时就会出现问题。</p>
<p>当一个以<code>C</code>或<code>C++</code>编写的扩展模块有一个伴随的，提供高层接口的<code>Python</code>模块时，<code>C/C++</code>模块需要以一个下划线开始（例如，<code>_socket</code>）。</p>
<h4 id="类命名">类命名</h4><p>正常情况下，类名使用<code>CapWords</code>风格。</p>
<p>在类被作为接口文档化了，并且主要被当做一个可调用的对象的情况下，应该使用函数的命名约定。</p>
<p>注意，对于内建(builtin)名字有一个单独的约定：大多数的内建名字都是单个单词（或两个单词和在一起），<code>CapWords</code>约定仅使用在异常命名和内建常量上。</p>
<h4 id="异常命名">异常命名</h4><p>因为异常应该是类，因此使用类命名的约定。然而，你应该在你的异常命名上使用<code>&quot;Error&quot;</code>后缀（如果异常确实是一个错误的话）。</p>
<h4 id="全局变量命名">全局变量命名</h4><p>（让我们期望这些变量仅在一个模块内部使用。）它的命名约定和函数的命名约定差不多。</p>
<p>对那些设计能够使用<code>from M import *</code>来导入的模块应该使用<code>__all__</code>机制来阻止导出全局变量，或者使用前面的约定在全局变量上加上下划线前缀（通过这样表示你想要使这些全局变量成为“模块非公有”）。</p>
<h4 id="函数命名">函数命名</h4><p>函数命名应该使用<code>lowecase</code>风格，根据需要以下划线分割单词来提高可读性。</p>
<p><code>mixedCase</code>风格仅在那些已经大量使用该风格的上下文中使用（例如，<code>threading.py</code>)，为了保持向后兼容性。</p>
<h4 id="函数和方法参数">函数和方法参数</h4><p>总是使用<code>self</code>作为实例方法的第一个参数。</p>
<p>总是使用<code>cls</code>作为类方法的第一个参数。</p>
<p>如果函数的参数名和一个保留关键字冲突，通常的做法是在名字后面加上一个下划线，而不是使用缩写或拼写贪墨(spelling corruption)。因此<code>class_</code>好于<code>clss</code>。（或许通过使用同义词来避免冲突会更好。）</p>
<h4 id="方法名和实例变量">方法名和实例变量</h4><p>使用函数命名规则：<code>lowercase</code>风格，根据需要使用下划线分割单词以提高可读性。</p>
<p>为非公共的方法和实例变量添加一个下划线前缀。</p>
<p>避免名字和子类冲突，使用两下划线前缀来触发<code>Python</code>的名字碾压机制。</p>
<p><code>Python</code>会使用类名来碾压这些名字：如果类<code>Foo</code>有一个属性为<code>__a</code>，它就不能够使用<code>Foo.__a</code>来访问。（一个坚持的用户可以通过调用<code>Foo._Foo__a</code>来获得访问。）通常，双下划线前缀仅用于避免基类的属性和它的子类的属性相冲突。</p>
<p>注意：有关使用 <code>__</code> 的名字还有些争论。</p>
<h4 id="常量">常量</h4><p>常量通常定义在模块的层级上，所有字母全大写，使用下划线分割单词。例子包括<code>MAX_OVERFLOW</code>和<code>TOTAL</code>。</p>
<h4 id="继承设计">继承设计</h4><p>总是要判断一个类的方法和实例变量（统称：“属性”）是否是公有的或非公有的。如果存在疑虑，先选择非公有；因为相比于把公有属性改为非公有，把非公有改为公有更容易。</p>
<p>公共属性是指那些你希望你的类客户所使用的，并且你承诺过不会有不向后兼容的改变的那些属性。非公有属性是指那些不打算被第三方使用的，你不能保证不去修改或甚至被删除的那些属性。</p>
<p>我们不在这里使用“私有”这一术语，因为在<code>Python</code>中并没有真正的私有属性。</p>
<p>另一类属性是“子类API”（在其它语言中通常称为”protected”）。一些类设计为基类，可以扩展或修改其行为。当设计这样的类时，要小心地做出明确的决定：哪些属性是公有的、哪些作为子类<code>API</code>、哪些确实只在你的基类中使用。</p>
<p>据此，以下是<code>Python</code>化(Pythonic)的指南：</p>
<ul>
<li><p>公有属性不要下划线前缀</p>
</li>
<li><p>如果公有属性名和保留关键字相冲突，在你的属性名末尾加上一个下划线。（然而，尽管有这条规则，<code>&#39;cls&#39;</code>仍然是表示一个类变量或参数的首选方式，特别是作为类方法的第一个参数。）</p>
<p>注意1：见以上关于类方法的参数命名建议。</p>
</li>
<li><p>对于简单的公有数据属性，最好是直接暴露属性名，不要使用复杂的访问器/修改器方法。记住<code>Python</code>为你提供了在未来增强属性的简单方式，将来你会发现一个简单的数据属性需要增加功能行为。在这种情况下，使用属性(property)把功能实现隐藏在简单的数据属性(data attribute)访问语法之后。</p>
<p>注意1：属性(property)只在新型类中工作。<br>注意2：尽量保持功能属性没有副作用，虽然如缓存(caching)这样的副作用一般都没有问题。<br>注意3：避免使用属性来进行计算昂贵的操作；这种属性记法会使得调用者相信这一访问是（相对）廉价的。</p>
</li>
<li><p>如果你的类的意图是为了被子类化，并且该类中有你不想要子类使用的属性，考虑使用双下划线前缀和没有下划线后缀的方式来命名这些属性。这会触发<code>Python</code> 名字篡改算法，把类名加入到(mangled into)属性名中。这样会避免子类无意中包含了和基类同名的属性而引起的名字冲突。</p>
<p>注意1：请注意在篡改名字时仅简单的使用了类名，因此如果你的子类同时使用了与基类相同的类名和属性名，仍然会出现命名冲突。<br>注意2：名字篡改使得某些使用者，如调试和<code>__getattr__()</code>，变得不方便。然而，名字篡改算法还是有据可查和易于手动地执行的。<br>注意3：并不是每个人都喜欢名字篡改。试着去平衡避免名字冲突的需要和将来潜在的调用需求。</p>
</li>
</ul>
<h3 id="公共和内部接口">公共和内部接口</h3><p>任何向后兼容性保证只适用于公共接口。相应的，能够使用户清晰的区分公共和内部接口是重要的。</p>
<p>文档化的接口被认为是公共的，除非在文档中明确的声明接口是临时的或内部的，以免除通常的向后兼容性保证。所有未文档化的接口都被假定为内部的。</p>
<p>为了更好地支持自省(introspection)，模块应该使用<code>__all__</code>属性来显示的声明它所提供的公共的名字。设置<code>__all__</code>为一个空的<code>list</code>，表示该模块没有公共的<code>API</code>。</p>
<p>即使适当的设置了<code>__all__</code>，内部的接口（包、模块、类、函数、属性或其它名字）也应该使用一个下划线作为其前缀。</p>
<p>在任何内部的命名空间（包、模块或类）中的接口也被认为是内部的。</p>
<p>应该总是认为被导入的名字是一个实现层次上的细节。其它的模块绝不能对这些被导入的名字进行间接访问，除非它们是作为导入它们的模块的，显示文档化了的<code>API</code>的一部分，诸如<code>os.path</code>或一个包的<code>__init__</code>模块（用于从子模块公开功能）。</p>
<h2 id="编程建议">编程建议</h2><ul>
<li><p>代码不要不利于其它的<code>Python</code>实现（<code>PyPy</code>, <code>Jython</code>, <code>IronPython</code>, <code>Cython</code>, <code>Psyco</code>等等）。</p>
<p>例如，不要依赖<code>CPython</code>的，形如<code>a += b</code>或<code>a = a + b</code>这样的语句，高效的就地字符串连接现实。这一优化即使是在<code>CPython</code>中也很脆弱（它只能用于某些类型），并且在那些没有使用引用计数(refcounting)的实现中根本就不存在。对于性能比较敏感的库中，应该使用<code>&#39;&#39;.join()</code>的形式。它会确保在不同的实现中连接都会在线性时间内完成。</p>
</li>
<li><p>同<code>None</code>比较时，总是使用<code>is</code>或<code>is not</code>，而不是相等操作符。</p>
<p>同样，谨防当你的真实意图是<code>if x is not None</code>而写成了<code>if x</code> —— 例如，在测试一个变量或参数是否默认为<code>None</code>，从而给它赋其它值的时候。而这个其它值（例如容器）在布尔上下文中可能是<code>false</code>！</p>
</li>
<li><p>使用<code>is not</code>操作符而不是<code>not ... is</code>。虽然两个表达式功能性相同，但前者的可读性更强。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> foo <span class="keyword">is</span> <span class="keyword">None</span>:</span><br></pre></td></tr></table></figure>
</li>
<li><p>当需要丰富的比较来实现排序操作时，最好实现所有六个操作符(<code>__eq__</code>,<code>__ne__</code>,<code>__lt__</code>,<code>__le__</code>,<code>__gt__</code>,<code>__ge__</code>)，而不是依赖其它的代码来使用一个特定的比较操作符。</p>
<p>为了简化，<code>functools.total_ordering()</code>装饰器提供了一个工具来生成缺失的比较方法。</p>
<p>根据<a href="https://www.python.org/dev/peps/pep-207" target="_blank" rel="external">PEP 207</a>的指示，<code>Python</code>使用自反性规则。也就是，解释器能够交换<code>y &gt; x</code>和<code>x &lt; y</code>，<code>x == y</code>和<code>x != y</code>。<code>sort()</code>和<code>min()</code>操作保证使用<code>&lt;</code>操作符，而<code>max()</code>函数使用<code>&gt;</code>操作符。然而，最好还是实现所有的六个操作符，使得在其它的场合不会引起混乱。</p>
</li>
<li><p>总是使用<code>def</code>语句，而不是使用赋值语句直接把一个<code>lambda</code>表达式绑定到一个标识符。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="number">2</span>*x</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: <span class="number">2</span>*x</span><br></pre></td></tr></table></figure>
<p>第一中形式意味着该函数对象的确切的名字是<code>&#39;f&#39;</code>，而不是通用的<code>&#39;&lt;lambda&gt;&#39;</code>。这更利于<code>traceback</code>和通用的字符串表示。赋值语句的使用消除了<code>lambda</code>表达式相比于显示的<code>def</code>语句可以提供的唯一好处（例如，它可以被嵌入更大的表达式）。</p>
</li>
<li><p>从<code>Exception</code>而不是<code>BaseException</code>派生异常。直接从<code>BaseException</code>继承保留给了那些不需要捕捉的异常（捕捉它们几乎总是错误的）。</p>
<p>设计异常层次结构应该基于“是为了什么需要”来捕获异常的区分，而不是所抛出异常的位置。宗旨是以编程的方式回答“出现了什么问题？”，而不是仅仅说明“一个问题发生了”（见<a href="https://www.python.org/dev/peps/pep-3151" target="_blank" rel="external">PEP 3151</a>，从内置异常层次结构学习到的一个示例）。</p>
<p>这里适用于类的命名规范，然而当异常是一个错误(error)时，你应该给它加上<code>&quot;Error&quot;</code>后缀。被用于非局部流程控制或其它形式的信号的非错误异常不需要特殊的后缀。</p>
</li>
<li><p>适当的使用异常链。在<code>Python 3</code>中，应该使用<code>&quot;raise X from Y&quot;</code>，这样就不会导致原有的<code>traceback</code>丢失。</p>
<p>当故意的取代内部异常的时候（在<code>Python 2</code>中使用<code>&quot;raise X&quot;</code>，在<code>Python 3.3+</code>中使用<code>&quot;raise X from None&quot;</code>），要确保相关的细节被转移到了新的异常里了（例如，在把<code>KeyError</code>转换到<code>AttributeError</code>时保留其属性名，或把原异常的文本嵌入到新异常的消息中）。</p>
</li>
<li><p>在<code>Python 2</code>中抛出异常的时候，使用<code>raise ValueError(&#39;message&#39;)</code>的形式，而不是<code>raise ValueError, &#39;mdssage</code>这种过时的形式。</p>
<p>在<code>Python 3</code>中，后一种形式不符合语法。</p>
<p>使用括号的形式也意味着当异常的参数太长或包含字符串格式化时，得益于所使用的括号，你不需要使用行延续字符。</p>
</li>
<li><p>当捕获异常时，尽量提到具体的异常，而不要仅使用裸的<code>except:</code>字句。</p>
<p>例如，使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> platform_specific_module</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    platform_specific_module = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>裸的<code>except:</code>字句会捕获<code>SystemExit</code>和<code>KeyboardInterrupt</code>异常，导致不能使用<code>Control-C</code>来中断一个程序，而且还会掩盖其它问题。如果你要捕获所有标志程序错误的异常，请使用<code>except Exception：</code>（裸的<code>except:</code>等价于<code>except BaseException:</code>）。</p>
<p>一种比较好的做法是只在以下两种情况中使用裸的<code>&#39;except&#39;</code>字句：</p>
<ol>
<li>如果异常处理程序会打印或日志记录<code>traceback</code>；至少用户将会意识到发生了一个错误。</li>
<li>如果需要代码做一些清理工作，然后使用<code>raise</code>把异常向上传播。<code>try ... finally</code>可能是一个更好的方式来处理这种情况。</li>
</ol>
</li>
<li><p>当绑定被捕获的异常到一个名字时，使用在<code>Python 2.6</code>中添加的显示名字绑定语法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process_data()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">    <span class="keyword">raise</span> DataProcessingFailedError(str(exc))</span><br></pre></td></tr></table></figure>
<p>这是<code>Python 3</code>中唯一支持的语法，并且能够避免老式基于逗号的语法所带来的模棱两可。</p>
</li>
<li><p>当捕获操作系统错误时，宁愿使用<code>Python 3.3</code>引入的显示异常层次结构，而不是对<code>errno</code>值做自省。</p>
</li>
<li><p>此外，对于所有的<code>try/except</code>字句，限制<code>try</code>字句的语句数量到最小是有必要的。再一次，这样做避免了掩盖<code>bug</code>。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = collection[key]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> handle_value(value)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Too broad!</span></span><br><span class="line">    <span class="keyword">return</span> handle_value(collection[key])</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="comment"># Will also catch KeyError raised by handle_value()</span></span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br></pre></td></tr></table></figure>
</li>
<li><p>当一个资源只在一个特定代码片段中使用时，使用<code>with</code>语句来确保：当该资源被使用完后，会被及时地和可靠地清理。使用<code>try/finally</code>语句也是可以接受的方式。</p>
</li>
<li><p>上下文管理(context manager)都应该通过单独的函数或方法来调用，无论它们会不会做除了获取和释放资源以外的事情。例如：</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> conn.begin_transaction():</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> conn:</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br></pre></td></tr></table></figure>
<p>后一个例子并不能提供任何的信息，表明<code>__enter__</code>和<code>__exit__</code>方法会做除了在一个事务(transaction)结束之后关闭连接之外的其它任何事情。在这种情况下，显示(explicit)的方式是很重要的。</p>
</li>
<li><p>在<code>return</code>语句中保持一致。在一个函数中的所有<code>return</code>语句，要么都返回一个表达式，要么都不返回。如果有任何一个<code>return</code>语句返回一个表达式，那么其它任何不返回值的<code>return</code>语句都要显示的使用<code>None</code>作为其返回值，并且在函数的最后应该放一个显示的<code>return</code>语句（如果可以到达的话）。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用字符串方法而不是字符串模块。</p>
<p>字符串方法总是比较快，而且和<code>Unicode</code>字符串具有相同的<code>API</code>。如果为了同<code>Python 2.0</code>和其以前的版本保持后向兼容，请忽略本条款。</p>
</li>
<li><p>使用<code>&quot;.startswith()&quot;</code>和<code>&quot;.endswith()&quot;</code>来检查前缀和后缀，而不是字符串切片(slicing)。</p>
<p><code>startswith()</code>和<code>endswith()</code>更简洁，且不容易出错。例如：</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo.startswith(<span class="string">'bar'</span>):</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo[:<span class="number">3</span>] == <span class="string">'bar'</span>:</span><br></pre></td></tr></table></figure>
</li>
<li><p>应该总是使用<code>ininstance()</code>进行对象类型比较，而不是直接比较类型。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isinstance(obj, int):</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> type(obj) <span class="keyword">is</span> type(<span class="number">1</span>):</span><br></pre></td></tr></table></figure>
<p>当检查一个对象是否时字符串时，请记住：它有可能是一个<code>Unicode</code>字符串！在<code>Python 2</code>中，<code>str</code>和<code>unicode</code>具有相同的基类：<code>basestring</code>。因此，你可以这样做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isinstance(obj, basestring):</span><br></pre></td></tr></table></figure>
<p>注意，在<code>Python 3</code>中已经不存在<code>unicode</code>和<code>basestring</code>了（只有<code>str</code>了），并且<code>bytes</code>对象已经不在是一种字符串了（它变成了一个整数序列）。</p>
</li>
<li><p>对于序列（<code>string</code>、<code>list</code>、<code>tuple</code>），运用空序列是<code>false</code>这一事实。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> seq:</span><br><span class="line"><span class="keyword">if</span> seq:</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(seq)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(seq)</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要写出依赖于以有意义的空格结尾的字符串字面值。这样的空格在视觉上无法区分，并且有些编辑器会修剪它们。</p>
</li>
<li><p>不要使用<code>==</code>来进行布尔值和<code>True</code>或<code>False</code>的比较。</p>
<p>Yes:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> greeting:</span><br></pre></td></tr></table></figure>
<p>No:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> greeting == <span class="keyword">True</span>:</span><br></pre></td></tr></table></figure>
<p>Worse:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> greeting <span class="keyword">is</span> <span class="keyword">True</span>:</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Python</code>标准库不使用函数注解，因为这会导致对一个特定的注解风格过早的承诺。反之，这块留给用户发现和实验有用的注解风格。</p>
<p><em>注解部分省略</em></p>
</li>
</ul>
<h2 id="参考">参考</h2><p>[<span id="id1">1</span>] <a href="https://www.python.org/dev/peps/pep-0007" target="_blank" rel="external">PEP 7</a>, Style Guide for C Code, van Rossum<br>[<span id="id2">2</span>] <a href="http://barry.warsaw.us/software/STYLEGUIDE.txt" target="_blank" rel="external">Barry’s GNU Mailman style guide</a><br>[<span id="id3">3</span>] <a href="http://www.wikipedia.com/wiki/CamelCase" target="_blank" rel="external">http://www.wikipedia.com/wiki/CamelCase</a><br>[4] PEP 8 modernisation, July 2013 <a href="http://bugs.python.org/issue18472" target="_blank" rel="external">http://bugs.python.org/issue18472</a></p>
<p>脚注</p>
<p>[<span id="id5">5</span>] 悬挂式缩进是一种打字机风格，一个段落中除第一行之外的所有行都缩进。在<code>Python</code>中，这一术语用于描述一种风格：一个被括起来的语句的开始括号作为第一行中的最后一个非空字符，其后续行一并缩进，直到遇到结束的括号。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>译自：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></p>
<table>
<thead>
<tr>
<th>PEP:</th>
<th>8</th>
</tr>
</thead>
<tbody>
<tr>
<td>Title:</td>
<td>Style Guide for Python Code</td>
</tr>
<tr>
<td>Author:</td>
<td>Guido van Rossum <guido at python.org>, Barry Warsaw <barry at python.org>, Nick Coghlan <ncoghlan at gmail.com></td>
</tr>
<tr>
<td>Status:</td>
<td>Active</td>
</tr>
<tr>
<td>Type:</td>
<td>Process</td>
</tr>
<tr>
<td>Created:</td>
<td>05-Jul-2001</td>
</tr>
<tr>
<td>Post-History:</td>
<td>05-Jul-2001, 01-Aug-2013</td>
</tr>
</tbody>
</table>
<h2 id="介绍">介绍</h2><p>本文对<code>Python</code>的主要发行版本的标准库代码给出了编码约定。关于<code>Python</code>的<code>C</code>实现中的<code>C</code>风格指南请见相关的PEP<a href="#id1">[1]</a>。 </p>
<p>本文和<a href="https://www.python.org/dev/peps/pep-0257">PEP 257</a>（<code>文档字符串约定</code>）改编于<code>Guido</code>最初的<code>Python</code>风格指南文章，并从<code>Barry</code>的风格指南中汲取了一些内容<a href="#id2">[2]</a>。</p>
<p>因为语言本身的变化，本风格指南也随着时间的推移而演变，更多的约定被发现，过时的约定被淘汰。</p>
<p>许多的项目有他们自己的编码风格指南。如果和本指南发生了冲突，项目应该居先考虑项目特定的指南。</p>]]>
    
    </summary>
    
      <category term="Coding Style" scheme="http://lyhopq.github.io/tags/Coding-Style/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="翻译" scheme="http://lyhopq.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(二十) -- 职责链模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E4%BA%8C%E5%8D%81)%20--%20%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(二十) -- 职责链模式/</id>
    <published>2015-09-04T06:24:51.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/chain.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>请假由谁批要看天数？</p>
</blockquote>
<a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Request</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> requestType;</span><br><span class="line">	<span class="built_in">string</span> requestContent;</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Manager(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setSuperior</span><span class="params">(Manager *superior)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;superior=superior;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request *request)</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Manager *superior;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CommonManager:<span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CommonManager(<span class="built_in">string</span> name):Manager(name)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request *request)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request-&gt;requestType==<span class="string">"请假"</span> &amp;&amp; request-&gt;number&lt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" "</span>&lt;&lt;request-&gt;requestContent&lt;&lt;<span class="string">" 数量: "</span>&lt;&lt;request-&gt;number&lt;&lt;<span class="string">"被批准"</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(superior!=NULL)</span><br><span class="line">			&#123;</span><br><span class="line">				superior-&gt;handleRequest(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Majordomo:<span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Majordomo(<span class="built_in">string</span> name):Manager(name)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request *request)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request-&gt;requestType==<span class="string">"请假"</span> &amp;&amp; request-&gt;number&lt;=<span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" "</span>&lt;&lt;request-&gt;requestContent&lt;&lt;<span class="string">" 数量: "</span>&lt;&lt;request-&gt;number&lt;&lt;<span class="string">"被批准"</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(superior!=NULL)</span><br><span class="line">			&#123;</span><br><span class="line">				superior-&gt;handleRequest(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> GeneralManager:<span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	GeneralManager(<span class="built_in">string</span> name):Manager(name)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request *request)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request-&gt;requestType==<span class="string">"请假"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" "</span>&lt;&lt;request-&gt;requestContent&lt;&lt;<span class="string">" 数量: "</span>&lt;&lt;request-&gt;number&lt;&lt;<span class="string">"被批准"</span>&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	CommonManager *jinli=<span class="keyword">new</span> CommonManager(<span class="string">"经理"</span>); </span><br><span class="line">	Majordomo *zongjian=<span class="keyword">new</span> Majordomo(<span class="string">"总监"</span>);</span><br><span class="line">	GeneralManager *zhongjingli=<span class="keyword">new</span> GeneralManager(<span class="string">"总经理"</span>);</span><br><span class="line">	</span><br><span class="line">	jinli-&gt;setSuperior(zongjian);</span><br><span class="line">	zongjian-&gt;setSuperior(zhongjingli);</span><br><span class="line">	</span><br><span class="line">	Request *request=<span class="keyword">new</span> Request();</span><br><span class="line"></span><br><span class="line">	request-&gt;requestType=<span class="string">"请假"</span>;</span><br><span class="line">	request-&gt;requestContent=<span class="string">"李俊宏请假"</span>;</span><br><span class="line">	request-&gt;number=<span class="number">1</span>;</span><br><span class="line">	jinli-&gt;handleRequest(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	request-&gt;requestType=<span class="string">"请假"</span>;</span><br><span class="line">	request-&gt;requestContent=<span class="string">"李俊宏请假"</span>;</span><br><span class="line">	request-&gt;number=<span class="number">4</span>;</span><br><span class="line">	jinli-&gt;handleRequest(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	request-&gt;requestType=<span class="string">"请假"</span>;</span><br><span class="line">	request-&gt;requestContent=<span class="string">"李俊宏请假"</span>;</span><br><span class="line">	request-&gt;number=<span class="number">10</span>;</span><br><span class="line">	jinli-&gt;handleRequest(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.requestType = <span class="string">''</span></span><br><span class="line">        self.requestContent = <span class="string">''</span></span><br><span class="line">        self.number = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.superior = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSuperior</span><span class="params">(self, superior)</span>:</span></span><br><span class="line">        self.superior = superior</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonManager</span><span class="params">(Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(CommonManager, self).__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.requestType==<span class="string">u'请假'</span> <span class="keyword">and</span> request.number&lt;=<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u'&#123;&#125; &#123;&#125; 数量：&#123;&#125; 被批准'</span>.format(self.name,</span><br><span class="line">                                            request.requestContent,</span><br><span class="line">                                            request.number)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.superior:</span><br><span class="line">                self.superior.handleRequest(request)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Majordomo</span><span class="params">(Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Majordomo, self).__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.requestType==<span class="string">u'请假'</span> <span class="keyword">and</span> request.number&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u'&#123;&#125; &#123;&#125; 数量：&#123;&#125; 被批准'</span>.format(self.name,</span><br><span class="line">                                            request.requestContent,</span><br><span class="line">                                            request.number)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.superior:</span><br><span class="line">                self.superior.handleRequest(request)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span><span class="params">(Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(GeneralManager, self).__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.requestType==<span class="string">u'请假'</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u'&#123;&#125; &#123;&#125; 数量：&#123;&#125; 被批准'</span>.format(self.name,</span><br><span class="line">                                            request.requestContent,</span><br><span class="line">                                            request.number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    jinli = CommonManager(<span class="string">u"经理"</span>)</span><br><span class="line">    zongjian = Majordomo(<span class="string">u"总监"</span>)</span><br><span class="line">    zhongjingli = GeneralManager(<span class="string">u"总经理"</span>)</span><br><span class="line"></span><br><span class="line">    jinli.setSuperior(zongjian)</span><br><span class="line">    zongjian.setSuperior(zhongjingli)</span><br><span class="line"></span><br><span class="line">    request = Request()</span><br><span class="line"></span><br><span class="line">    request.requestType=<span class="string">u"请假"</span></span><br><span class="line">    request.requestContent=<span class="string">u"李俊宏请假"</span></span><br><span class="line">    request.number=<span class="number">1</span></span><br><span class="line">    jinli.handleRequest(request)</span><br><span class="line"></span><br><span class="line">    request.requestType=<span class="string">u"请假"</span></span><br><span class="line">    request.requestContent=<span class="string">u"李俊宏请假"</span></span><br><span class="line">    request.number=<span class="number">4</span></span><br><span class="line">    jinli.handleRequest(request)</span><br><span class="line"></span><br><span class="line">    request.requestType=<span class="string">u"请假"</span></span><br><span class="line">    request.requestContent=<span class="string">u"李俊宏请假"</span></span><br><span class="line">    request.number=<span class="number">10</span></span><br><span class="line">    jinli.handleRequest(request)</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">经理 李俊宏请假 数量：<span class="number">1</span> 被批准</span><br><span class="line">总监 李俊宏请假 数量：<span class="number">4</span> 被批准</span><br><span class="line">总经理 李俊宏请假 数量：<span class="number">10</span> 被批准</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>职责链模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/chain1.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/chain.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>请假由谁批要看天数？</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十九) -- 命令模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%B9%9D)%20--%20%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十九) -- 命令模式/</id>
    <published>2015-09-04T02:33:23.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个请求封装为一个对象，从而使可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/command.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>烧烤店客户向服务员点单，服务员将点好的单告诉大厨，由大厨进行烹饪。</p>
</blockquote>
<a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Barbecuer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">bakeMutton</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"烤羊肉串"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">bakeChickenWing</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"烤鸡翅"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	Barbecuer *receiver;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Command(Barbecuer *receiver)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;receiver=receiver;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BakeMuttonCommand:<span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	BakeMuttonCommand(Barbecuer *receiver):Command(receiver)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		receiver-&gt;bakeMutton();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BakeChikenWingCommand:<span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	BakeChikenWingCommand(Barbecuer *receiver):Command(receiver)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		receiver-&gt;bakeChickenWing();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Waiter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">list</span>&lt;Command*&gt; orders;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Command *command)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		orders.push_back(command);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">list</span>&lt;Command*&gt;::iterator iter=orders.begin();</span><br><span class="line">		<span class="keyword">while</span>(iter!=orders.end())</span><br><span class="line">		&#123;</span><br><span class="line">			(*iter)-&gt;executeCommand();</span><br><span class="line">			iter++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Barbecuer *boy=<span class="keyword">new</span> Barbecuer();</span><br><span class="line">	Command *bm1=<span class="keyword">new</span> BakeMuttonCommand(boy);</span><br><span class="line">	Command *bm2=<span class="keyword">new</span> BakeMuttonCommand(boy);</span><br><span class="line">	Command *bc1=<span class="keyword">new</span> BakeChikenWingCommand(boy);</span><br><span class="line">	</span><br><span class="line">	Waiter *girl=<span class="keyword">new</span> Waiter();</span><br><span class="line"></span><br><span class="line">	girl-&gt;setOrder(bm1);</span><br><span class="line"> 	girl-&gt;setOrder(bm2);</span><br><span class="line"> 	girl-&gt;setOrder(bc1);</span><br><span class="line">	</span><br><span class="line">	girl-&gt;notify();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barbecuer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bakeMutton</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'烤羊肉串'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bakeChickenWing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'烤鸡翅'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, receiver)</span>:</span></span><br><span class="line">        self.receiver = receiver</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeMuttonCommand</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, receiver)</span>:</span></span><br><span class="line">        super(BakeMuttonCommand, self).__init__(receiver)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.receiver.bakeMutton()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakeChikenWingCommand</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, receiver)</span>:</span></span><br><span class="line">        super(BakeChikenWingCommand, self).__init__(receiver)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.receiver.bakeChickenWing()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.commands = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setOrder</span><span class="params">(self, command)</span>:</span></span><br><span class="line">        self.commands.append(command)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> command <span class="keyword">in</span> self.commands:</span><br><span class="line">            command.execute()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    boy = Barbecuer()</span><br><span class="line">    bm1 = BakeMuttonCommand(boy)</span><br><span class="line">    bm2 = BakeMuttonCommand(boy)</span><br><span class="line">    bc1 = BakeChikenWingCommand(boy)</span><br><span class="line"></span><br><span class="line">    girl = Waiter()</span><br><span class="line"></span><br><span class="line">    girl.setOrder(bm1)</span><br><span class="line">    girl.setOrder(bm2)</span><br><span class="line">    girl.setOrder(bc1)</span><br><span class="line"></span><br><span class="line">    girl.notify()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">烤羊肉串</span><br><span class="line">烤羊肉串</span><br><span class="line">烤鸡翅</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>命令模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/c1.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个请求封装为一个对象，从而使可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/command.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>烧烤店客户向服务员点单，服务员将点好的单告诉大厨，由大厨进行烹饪。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十八) -- 桥接模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E5%85%AB)%20--%20%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十八) -- 桥接模式/</id>
    <published>2015-08-08T09:21:58.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将抽象部分和它的实现部分分离，使它们可以独立的变化。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/bridge.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>两种品牌的手机，运行相同的软件</p>
</blockquote>
<a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetSoft</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetGame:<span class="keyword">public</span> HandsetSoft</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"运行手机游戏"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetAddressList:<span class="keyword">public</span> HandsetSoft</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"运行手机通讯录"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetBrand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    HandsetSoft *soft;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHandsetSoft</span><span class="params">(HandsetSoft *soft)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;soft=soft;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetBrandN:<span class="keyword">public</span> HandsetBrand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"手机品牌N："</span>;</span><br><span class="line">        soft-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HandsetBrandM:<span class="keyword">public</span> HandsetBrand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"手机品牌M："</span>;</span><br><span class="line">        soft-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    HandsetBrand *hb;</span><br><span class="line">    </span><br><span class="line">    hb=<span class="keyword">new</span> HandsetBrandN();</span><br><span class="line">    hb-&gt;setHandsetSoft(<span class="keyword">new</span> HandsetGame());</span><br><span class="line">    hb-&gt;run();</span><br><span class="line">    hb-&gt;setHandsetSoft(<span class="keyword">new</span> HandsetAddressList());</span><br><span class="line">    hb-&gt;run();</span><br><span class="line"></span><br><span class="line">    hb=<span class="keyword">new</span> HandsetBrandM();</span><br><span class="line">    hb-&gt;setHandsetSoft(<span class="keyword">new</span> HandsetGame());</span><br><span class="line">    hb-&gt;run();</span><br><span class="line">    hb-&gt;setHandsetSoft(<span class="keyword">new</span> HandsetAddressList());</span><br><span class="line">    hb-&gt;run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetSoft</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetGame</span><span class="params">(HandsetSoft)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"运行手机游戏"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetAddressList</span><span class="params">(HandsetSoft)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"运行手机通讯录"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetBrand</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.m_soft = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetHandsetSoft</span><span class="params">(self,temp)</span>:</span></span><br><span class="line">        self.m_soft= temp</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetBrandN</span><span class="params">(HandsetBrand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.m_soft == <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"手机品牌N："</span>,</span><br><span class="line">            self.m_soft.Run()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandsetBrandM</span><span class="params">(HandsetBrand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.m_soft == <span class="keyword">None</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"手机品牌M："</span>,</span><br><span class="line">            self.m_soft.Run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    brand = HandsetBrandN()</span><br><span class="line">    brand.SetHandsetSoft(HandsetGame())</span><br><span class="line">    brand.Run()</span><br><span class="line">    brand.SetHandsetSoft(HandsetAddressList())</span><br><span class="line">    brand.Run()    </span><br><span class="line"></span><br><span class="line">    brand = HandsetBrandM()</span><br><span class="line">    brand.SetHandsetSoft(HandsetGame())</span><br><span class="line">    brand.Run()</span><br><span class="line">    brand.SetHandsetSoft(HandsetAddressList())</span><br><span class="line">    brand.Run()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">手机品牌N： 运行手机游戏</span><br><span class="line">手机品牌N： 运行手机通讯录</span><br><span class="line">手机品牌M： 运行手机游戏</span><br><span class="line">手机品牌M： 运行手机通讯录</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>桥接模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/12VF55EP5Z-332S4.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将抽象部分和它的实现部分分离，使它们可以独立的变化。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/bridge.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>两种品牌的手机，运行相同的软件</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十七) -- 单例模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%B8%83)%20--%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十七) -- 单例模式/</id>
    <published>2015-08-02T05:17:59.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>保证类仅有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" alt=""></p>
<a id="more"></a>
<h2 id="类型：创建型">类型：创建型</h2><h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Singleton</span><br><span class="line">&#123;	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> Singleton *instance;</span><br><span class="line">	Singleton()</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> Singleton *getInstance()</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span>(NULL == instance)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton* Singleton::instance=NULL; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A:<span class="keyword">public</span> Singleton</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Singleton *one=Singleton::getInstance();</span><br><span class="line">	Singleton *two=A::getInstance();</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;(one==tow)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            orig = super(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    one = MyClass()</span><br><span class="line">    two = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> id(one) == id(two)</span><br></pre></td></tr></table></figure>
<h3 id="Pythonic_实现">Pythonic 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"><span class="decorator">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    one = MyClass()</span><br><span class="line">    two = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> id(one) == id(two)</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>单例模式</code>是比较简单的设计模式，但在<code>Python</code>中其实现方式有多种，详见<a href="http://blog.csdn.net/ghostfromheaven/article/details/7671853。" target="_blank" rel="external">http://blog.csdn.net/ghostfromheaven/article/details/7671853。</a></p>
<p>本文例举的第二种实现方法使用了<code>Python</code>的<code>装饰器</code>，其实现更更elegant和pythonic。<code>装饰器</code>在前面的模式中已经介绍过了，在这就不赘述了。</p>
<p>写了这么多，其实<code>Python</code>根本不需要<code>单例模式</code>，为什么呢？</p>
<p>因为，<code>Python</code>的模块（module），最pythonic的单例典范。</p>
<blockquote>
<p>模块：</p>
<ul>
<li>所有的变量都会绑定到模块</li>
<li>模块只初始化一次</li>
<li>import机制是线程安全的（保证了在并发状态下模块也只有一个实例）</li>
</ul>
</blockquote>
<p>因此，模块在在一个应用程序中只有一份，它本身就是单例的，将你所需要的属性和方法，直接暴露在模块中变成模块的全局变量和方法即可！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>保证类仅有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" alt=""></p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十六)--迭代器模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E5%85%AD)%20--%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十六) -- 迭代器模式/</id>
    <published>2015-07-13T01:40:37.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象中的内部表示。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="此处输入图片的描述"></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>乘车买票</p>
</blockquote>
<a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Iterator;</span><br><span class="line"><span class="keyword">class</span> Aggregate;</span><br><span class="line"><span class="keyword">class</span> BusAggregate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> Passenger ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Passenger <span class="title">first</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Passenger <span class="title">next</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BusIterator:<span class="keyword">public</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BusIterator(BusAggregate* bus)</span><br><span class="line">        :aggreate(bus), current(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Passenger <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Passenger <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    BusAggregate* aggreate;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Aggregate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">virtual</span> Iterator *createIterator()=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BusAggregate: <span class="keyword">public</span> Aggregate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> BusIterator;</span><br><span class="line">    </span><br><span class="line">    BusAggregate()</span><br><span class="line">    &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Iterator *createIterator()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getOn</span><span class="params">(Passenger passenger)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        sites[count++] = passenger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Passenger sites[<span class="number">37</span>];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Passenger BusIterator::first()</span><br><span class="line">&#123;</span><br><span class="line">    current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">Passenger BusIterator::next()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> aggreate-&gt;sites[current++]; </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">bool</span> BusIterator::hasNext()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(current == aggreate-&gt;count + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    BusAggregate bus;</span><br><span class="line">    bus.getOn(<span class="string">"大鸟"</span>);</span><br><span class="line">    bus.getOn(<span class="string">"小菜"</span>);</span><br><span class="line">    bus.getOn(<span class="string">"行李"</span>);</span><br><span class="line">    bus.getOn(<span class="string">"老外"</span>);</span><br><span class="line">    bus.getOn(<span class="string">"公交内部员工"</span>);</span><br><span class="line">    bus.getOn(<span class="string">"小偷"</span>);</span><br><span class="line">    </span><br><span class="line">    Iterator *iter = bus.createIterator();</span><br><span class="line">    </span><br><span class="line">    Passenger p = iter-&gt;first(); </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">" 请买车票！"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span>(iter-&gt;hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">" 请买车票！"</span> &lt;&lt; endl;</span><br><span class="line">        p = iter-&gt;next();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">()</span>:</span></span><br><span class="line">    sites = <span class="number">37</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.passenger = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOn</span><span class="params">(self, passenger)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.passenger) &gt; self.sites:</span><br><span class="line">            <span class="keyword">raise</span> <span class="string">"has no site!"</span></span><br><span class="line">        self.passenger.append(passenger)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.passenger:</span><br><span class="line">            <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    bus = Bus()</span><br><span class="line">    bus.getOn(<span class="string">"大鸟"</span>)</span><br><span class="line">    bus.getOn(<span class="string">"小菜"</span>)</span><br><span class="line">    bus.getOn(<span class="string">"行李"</span>)</span><br><span class="line">    bus.getOn(<span class="string">"老外"</span>)</span><br><span class="line">    bus.getOn(<span class="string">"公交内部员工"</span>)</span><br><span class="line">    bus.getOn(<span class="string">"小偷"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> bus:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125; 请买车票！'</span>.format(p)</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">大鸟 请买车票！</span><br><span class="line">小菜 请买车票！</span><br><span class="line">行李 请买车票！</span><br><span class="line">老外 请买车票！</span><br><span class="line">公交内部员工 请买车票！</span><br><span class="line">小偷 请买车票！</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p>在<code>Python</code>中像<code>list</code>、<code>tuple</code>、<code>map</code>等内置类型天生的支持迭代。自己定义迭代器也很简单，只要是实现了<code>__iter__</code>接口的对象，就可以使用迭代器进行访问。如上所示，在<code>bus</code>类中定义了<code>__iter__</code>方法，返回e一个迭代器。</p>
<ul>
<li><code>__iter__</code> 是实现迭代器的接口，是<code>Python</code>的魔术方法</li>
<li><code>yield</code> 产生生成器函数。简而言之，包含<code>yield</code>语句的函数会被特地编译成生成器(generator)。当函数被调用时，他们返回一个生成器对象，这个对象支持迭代器接口</li>
<li><code>for in</code> <code>Python</code>专门将关键字for用作了迭代器的语法糖。在for循环中，Python将自动调用工厂函数iter()获得迭代器（<code>iter（）</code>调用对象内部的<code>__iter__</code>方法），自动调用<code>next()</code>获取元素，还完成了检查<code>StopIteration</code>异常（迭代终止）的工作。</li>
</ul>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/6041cafeg8d35b1cee3d0&amp;690.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象中的内部表示。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="此处输入图片的描述"></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>乘车买票</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十四) -- 备忘录模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%BA%94)%20--%20%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十五) -- 组合模式/</id>
    <published>2015-07-03T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/组合模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>公司的组织结构</p>
</blockquote>
<a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Company(<span class="built_in">string</span> name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Company*)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company*)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">lineOfDuty</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人力资源部</span></span><br><span class="line"><span class="keyword">class</span> HRDepartment:<span class="keyword">public</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HRDepartment(<span class="built_in">string</span> name):Company(name)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(depth,'-')</span></span>;</span><br><span class="line">        str+=name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lineOfDuty</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;name &lt;&lt; <span class="string">" 员工培训管理"</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 财务部</span></span><br><span class="line"><span class="keyword">class</span> FinanceDepartment:<span class="keyword">public</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FinanceDepartment(<span class="built_in">string</span> name):Company(name)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(depth,'-')</span></span>;</span><br><span class="line">        str+=name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lineOfDuty</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;name &lt;&lt; <span class="string">" 公司财务收支管理"</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ConcreteCompany:<span class="keyword">public</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteCompany(<span class="built_in">string</span> name):Company(name)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        children.push_back(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Company *c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Company*&gt;::iterator iter=children.begin();</span><br><span class="line">        <span class="keyword">while</span>(iter!=children.end())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(*iter==c)</span><br><span class="line">            &#123;</span><br><span class="line">                children.erase(iter);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(depth,'-')</span></span>;</span><br><span class="line">        str+=name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Company*&gt;::iterator iter=children.begin(); iter != children.end(); ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            (*iter)-&gt;display(depth+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lineOfDuty</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Company*&gt;::iterator iter=children.begin(); iter != children.end(); ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            (*iter)-&gt;lineOfDuty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Company*&gt; children;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ConcreteCompany *root = <span class="keyword">new</span> ConcreteCompany(<span class="string">"北京总公司"</span>);</span><br><span class="line">    root-&gt;add(<span class="keyword">new</span> HRDepartment(<span class="string">"总公司人力资源部"</span>));</span><br><span class="line">    root-&gt;add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"总公司财务部"</span>));</span><br><span class="line"></span><br><span class="line">    ConcreteCompany *comp = <span class="keyword">new</span> ConcreteCompany(<span class="string">"上海华东分公司"</span>);</span><br><span class="line">    comp-&gt;add(<span class="keyword">new</span> HRDepartment(<span class="string">"华东分公司人力资源部"</span>));</span><br><span class="line">    comp-&gt;add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"华东分公司财务部"</span>));</span><br><span class="line">    root-&gt;add(comp);</span><br><span class="line"></span><br><span class="line">    ConcreteCompany *comp1 = <span class="keyword">new</span> ConcreteCompany(<span class="string">"南京办事处"</span>);</span><br><span class="line">    comp1-&gt;add(<span class="keyword">new</span> HRDepartment(<span class="string">"南京办事处人力资源部"</span>));</span><br><span class="line">    comp1-&gt;add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"南京办事处财务部"</span>));</span><br><span class="line">    comp-&gt;add(comp1);</span><br><span class="line"></span><br><span class="line">    ConcreteCompany *comp2 = <span class="keyword">new</span> ConcreteCompany(<span class="string">"杭州办事处"</span>);</span><br><span class="line">    comp2-&gt;add(<span class="keyword">new</span> HRDepartment(<span class="string">"杭州办事处人力资源部"</span>));</span><br><span class="line">    comp2-&gt;add(<span class="keyword">new</span> FinanceDepartment(<span class="string">"杭州办事处财务部"</span>));</span><br><span class="line">    comp-&gt;add(comp2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"\n结构图： "</span> &lt;&lt;endl;</span><br><span class="line">    root-&gt;display(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"\n职责： "</span> &lt;&lt;endl;</span><br><span class="line">    root-&gt;lineOfDuty();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(depth)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lineOfDuty</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 人力资源部</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HRDepartment</span><span class="params">(Company)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(HRDepartment, self).__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self, depth)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span> * depth + self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lineOfDuty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125; 员工培训管理'</span>.format(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 财务部</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinanceDepartment</span><span class="params">(Company)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(FinanceDepartment, self).__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self, depth)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span> * depth + self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lineOfDuty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125; 公司财务收支管理'</span>.format(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCompany</span><span class="params">(Company)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._children = []</span><br><span class="line">        super(ConcreteCompany, self).__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, c)</span>:</span></span><br><span class="line">        self._children.append(c)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, c)</span>:</span></span><br><span class="line">        self._children.remove(c)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self, depth)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span> * depth + self.name</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self._children:</span><br><span class="line">            item.display(depth + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lineOfDuty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self._children:</span><br><span class="line">            item.lineOfDuty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root = ConcreteCompany(<span class="string">"北京总公司"</span>)</span><br><span class="line">    root.add(HRDepartment(<span class="string">"总公司人力资源部"</span>))</span><br><span class="line">    root.add(FinanceDepartment(<span class="string">"总公司财务部"</span>))</span><br><span class="line"></span><br><span class="line">    comp = ConcreteCompany(<span class="string">"上海华东分公司"</span>)</span><br><span class="line">    comp.add(HRDepartment(<span class="string">"华东分公司人力资源部"</span>))</span><br><span class="line">    comp.add(FinanceDepartment(<span class="string">"华东分公司财务部"</span>))</span><br><span class="line">    root.add(comp)</span><br><span class="line"></span><br><span class="line">    comp1 = ConcreteCompany(<span class="string">"南京办事处"</span>)</span><br><span class="line">    comp1.add(HRDepartment(<span class="string">"南京办事处人力资源部"</span>))</span><br><span class="line">    comp1.add(FinanceDepartment(<span class="string">"南京办事处财务部"</span>))</span><br><span class="line">    comp.add(comp1)</span><br><span class="line"></span><br><span class="line">    comp2 = ConcreteCompany(<span class="string">"杭州办事处"</span>)</span><br><span class="line">    comp2.add(HRDepartment(<span class="string">"杭州办事处人力资源部"</span>))</span><br><span class="line">    comp2.add(FinanceDepartment(<span class="string">"杭州办事处财务部"</span>))</span><br><span class="line">    comp.add(comp2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'\n结构图：'</span></span><br><span class="line">    root.display(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'\n职责：'</span></span><br><span class="line">    root.lineOfDuty()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">结构图：</span><br><span class="line">-北京总公司</span><br><span class="line">---总公司人力资源部</span><br><span class="line">---总公司财务部</span><br><span class="line">---上海华东分公司</span><br><span class="line">-----华东分公司人力资源部</span><br><span class="line">-----华东分公司财务部</span><br><span class="line">-----南京办事处</span><br><span class="line">-------南京办事处人力资源部</span><br><span class="line">-------南京办事处财务部</span><br><span class="line">-----杭州办事处</span><br><span class="line">-------杭州办事处人力资源部</span><br><span class="line">-------杭州办事处财务部</span><br><span class="line"></span><br><span class="line">职责：</span><br><span class="line">总公司人力资源部 员工培训管理</span><br><span class="line">总公司财务部 公司财务收支管理</span><br><span class="line">华东分公司人力资源部 员工培训管理</span><br><span class="line">华东分公司财务部 公司财务收支管理</span><br><span class="line">南京办事处人力资源部 员工培训管理</span><br><span class="line">南京办事处财务部 公司财务收支管理</span><br><span class="line">杭州办事处人力资源部 员工培训管理</span><br><span class="line">杭州办事处财务部 公司财务收支管理</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>组合模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/55e74f8862f4eeb76b9d0b6086b02d9e.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/组合模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><h2 id="实例：">实例：</h2><blockquote>
<p>公司的组织结构</p>
</blockquote>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Eclipse + MinGW + Gtest 进行C/C++单元测试]]></title>
    <link href="http://lyhopq.github.io/Eclipse-MinGW-Gtest-%E8%BF%9B%E8%A1%8CC-C-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://lyhopq.github.io/Eclipse-MinGW-Gtest-进行C-C-单元测试/</id>
    <published>2015-07-03T11:47:25.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Step_1：_下载_gtest">Step 1： 下载 gtest</h2><p>最新版本gtest-1.7.0</p>
<h2 id="Step_2：_解压gtest-1-7-0">Step 2： 解压gtest-1.7.0</h2><p>解压gtest-1.7.0，打开文件夹gtest-1.7.0。其中”samples”包含了10个gtest的例子；”src”是gtest的源码。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s1.png" alt=""></p>
<a id="more"></a>
<h2 id="Step_3：在Eclipse中设置gtest的工作环境">Step 3：在Eclipse中设置gtest的工作环境</h2><h3 id="Step_3-1_创建测试工程">Step 3.1 创建测试工程</h3><p>打开Eclipse，点击”文件” -&gt; “新” -&gt; C++ Project<br>输入”项目名”，例如：”unit_test”</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s2.png" alt=""></p>
<p>在”Toolchains:”中选择”MinGW GCC”。<br>点击“下一步”，在”Select Configurations”中选择”Debug”，”Release”</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s3.png" alt=""></p>
<p>最后，点击”完成”。”unit_test”将会在左侧的“项目资源管理器”中显示。</p>
<h3 id="Step_3-2_添加gtest的库，源代码和test文件夹">Step 3.2 添加gtest的库，源代码和test文件夹</h3><ol>
<li>unt_test-&gt; “新” -&gt; “文件夹”，创建源代码(被测代码) 文件夹 “src”。</li>
<li>unt_test-&gt; “新” -&gt; “文件夹”，创建头文件文件夹 “include”。</li>
<li>unt_test-&gt; “新” -&gt; “文件夹”，创建文件夹 “gtest_src” 存放gtest的库文件。</li>
<li>unt_test-&gt; “新” -&gt; “文件夹”，创建文件夹 “test” 存放测试代码。</li>
</ol>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s4.png" alt=""></p>
<h3 id="Step_3-3_添加gtest库，被测代码和测试代码">Step 3.3 添加gtest库，被测代码和测试代码</h3><ol>
<li>在”gtest_src”文件夹中添加gtest库<br>通过执行gtest提供的命令行工具把gtest的库添加到”gtest_src”文件夹中。</li>
</ol>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s5.png" alt=""></p>
<p>执行上面的命令之后，工程看起来像这样：</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s6.png" alt=""></p>
<ol>
<li>添加被测代码</li>
</ol>
<p>文件夹”include” -&gt; “新” -&gt; Header File，创建头文件”factorial.h”。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s7.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#ifndef FACTORIAL_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FACTORIAL_H_</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* FACTORIAL_H_ */</span></span><br></pre></td></tr></table></figure>
<p>下一步，文件夹”src” -&gt; “新” -&gt; Source File，创建”factorial.cpp”源文件。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s8.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>添加测试代码</li>
</ol>
<p>文件夹”test” -&gt; “新” -&gt; Source File，创建”test_factorial.cpp”测试文件。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s9.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">include</span> "gtest/gtest.h"</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">include</span> "factorial.h"</span></span><br><span class="line"></span><br><span class="line">TEST(IntegerFunctionTest, negative)</span><br><span class="line">&#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">1</span>, factorial(-<span class="number">5</span>));</span><br><span class="line">    EXPECT_EQ(<span class="number">1</span>, factorial(-<span class="number">1</span>));</span><br><span class="line">    EXPECT_GT(factorial(-<span class="number">10</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TEST(IntegerFunctionTest, DISABLED_zero)</span><br><span class="line">&#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">1</span>, factorial(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TEST(IntegerFunctionTest, postive)</span><br><span class="line">&#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">1</span>, factorial(<span class="number">1</span>));</span><br><span class="line">    EXPECT_EQ(<span class="number">2</span>, factorial(<span class="number">2</span>));</span><br><span class="line">    EXPECT_EQ(<span class="number">6</span>, factorial(<span class="number">3</span>));</span><br><span class="line">    EXPECT_EQ(<span class="number">40320</span>, factorial(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加”gtest_main.cpp”文件</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s10.png" alt=""></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "gtest/gtest.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function">GTEST_API_ <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Running main() from gtest_main.cc\n"</span>);</span><br><span class="line">    testing::InitGoogleTest(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Step_4：设置运行环境">Step 4：设置运行环境</h2><ol>
<li>文件夹”test” -&gt; “属性” -&gt; C/C++ Build -&gt; Setting -&gt; GCC C++ Compiler -&gt; includes -&gt; Include paths (-I)<br>点击“add..” -&gt; “workspace..”, 添加文件夹 “include” 和 “gtest_src” 到包含路径。</li>
</ol>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s11.png" alt=""></p>
<ol>
<li>文件夹”gtest_src” -&gt; “属性” -&gt; C/C++ Build -&gt; Setting -&gt; GCC C++ Compiler -&gt; includes -&gt; Include paths (-I)<br>点击“add..” -&gt; “workspace..”, 添加文件夹“gtest_src” 到包含路径。</li>
</ol>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s12.png" alt=""></p>
<p>到这里，我们已经设置好了运行环境，就可以开始单元测试了。</p>
<h2 id="Step_5：运行gtest单元测试">Step 5：运行gtest单元测试</h2><p>在Eclipse中，点击”项目” -&gt; “全部构建”或者”Ctrl + B”来构建项目。</p>
<p>点击”运行” -&gt; “运行” 或者”Ctrl + F11”来运行可执行文件。<br>运行结果如下所示：</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s13.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Step_1：_下载_gtest">Step 1： 下载 gtest</h2><p>最新版本gtest-1.7.0</p>
<h2 id="Step_2：_解压gtest-1-7-0">Step 2： 解压gtest-1.7.0</h2><p>解压gtest-1.7.0，打开文件夹gtest-1.7.0。其中”samples”包含了10个gtest的例子；”src”是gtest的源码。</p>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/s1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Eclipse" scheme="http://lyhopq.github.io/tags/Eclipse/"/>
    
      <category term="Gtest" scheme="http://lyhopq.github.io/tags/Gtest/"/>
    
      <category term="MinGW" scheme="http://lyhopq.github.io/tags/MinGW/"/>
    
      <category term="单元测试" scheme="http://lyhopq.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="C/C++" scheme="http://lyhopq.github.io/categories/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elements of Modern C++ Style]]></title>
    <link href="http://lyhopq.github.io/Elements-of-Modern-C-Style/"/>
    <id>http://lyhopq.github.io/Elements-of-Modern-C-Style/</id>
    <published>2015-06-26T05:45:28.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<p>译自：<a href="http://herbsutter.com/elements-of-modern-c-style" target="_blank" rel="external">http://herbsutter.com/elements-of-modern-c-style</a></p>
<blockquote>
<p>“C++11 feels like a new language.” — Bjarne Stroustrup</p>
</blockquote>
<p><code>C++11</code>标准提供了<a href="http://www2.research.att.com/~bs/C++0xFAQ.html" target="_blank" rel="external">很多新特性</a>。本文特别的而且仅仅专注于那些使得<code>C++11</code>相比于<code>C++98</code>来说确实感觉像一门新语言的特性，因为：</p>
<ul>
<li>它们改变了编写C++代码时所要使用的风格和惯用手法，通常还包括设计C++库的方式。例如，你将会看到更多的智能指针作为参数和返回值，函数也会通过值的方式返回大对象。</li>
<li>它们被如此普遍的使用，以至于你会在大多数的代码示例中看见它们。例如，几乎在每5行的现代C++代码示例中你就会看见<code>auto</code>的身影。</li>
</ul>
<p><code>C++11</code>的特性也要好好的使用，但先使用好这些，因为它们是使得<code>C++11</code>代码整洁、安全（和现代主流语言一样整洁和安全）和快速的最普遍的特性，再加上C++的传统的，如金属般的性能，使之一如既往的强大。</p>
<p>说明：</p>
<ul>
<li>如同<code>Strunk &amp; White</code>，本文特意专注于简洁的总结指导，而不是为了提供详尽的原理阐述和<code>pro/con</code>分析；这将在其它的文章中探究。</li>
<li>这是一份保持更新的文档。你可以在最后随时间变化和添加的列表中看见。</li>
</ul>
<a id="more"></a>
<h2 id="auto">auto</h2><p>只要有可能就使用<code>auto</code>。它是很有用，原因有两个。首先，很明显是它是一种便利，可以使我们避免重复一个类型的名称，即使我们已经阐明而且编译器已经知道了它的类型。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator i = m.begin();</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">const</span> xlimit = config[<span class="string">"xlimit"</span>];</span><br><span class="line">singleton&amp; s = singleton::instance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">auto</span> i = begin(m);</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> xlimit = config[<span class="string">"xlimit"</span>];</span><br><span class="line"><span class="keyword">auto</span>&amp; s = singleton::instance();</span><br></pre></td></tr></table></figure>
<p>其次，当一个类型具有不可知或难以用语言表达的名称时，它就不仅仅是一个便利了。例如，多数的lambda函数你根本不能或不能轻易地拼写出它的类型名。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line">binder2nd&lt;greater&gt; x = bind2nd(greater(), <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">auto</span> x = [](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> i &gt; <span class="number">42</span>; &#125;;</span><br></pre></td></tr></table></figure>
<p>注意，使用<code>auto</code>并没有改变代码的含义。代码仍然是静态类型的，而且每个表达式的类型都是清晰和明确的；语言再也不会迫使我们重申类型名。</p>
<p>一些人刚开始的时候害怕在这里使用<code>auto</code>，因为如果不（重新）声明需要的类型的话，感觉好像我们有可能意外的得到一个不同的类型。如果你想要显示的<code>强制类型转换</code>，声明目标类型也是可以的。然而，在绝大多数时间，你只使用<code>auto</code>就可以了；很少会发生因为错误而得到一个不一样的类型的情况，而且即使在这种情况下，依靠语言的强大类型系统，编译器会让你知道：你在尝试调用一个变量的并不存在的成员方法，或者不是以正常的方式使用它。</p>
<h2 id="Smart_pointers:_No_delete">Smart pointers: No delete</h2><p>始终使用智能指针和<em>non-owing</em>原始指针。绝不使用<em>owing</em>原始指针和<code>delete</code>，除非在在罕见的情况下，如你需要实现自己的底层数据结构（即使如此，也要在类边界里面保持良好的封装）。</p>
<p>如果你知道你是另外一个对象的唯一拥有者，就使用<code>unique_ptr</code>来明确唯一所有权。”<code>new T</code>“表达式应该立即初始化拥有它的另一个对象，通常使用<code>unique_ptr</code>。一个典型的例子是<code>Pimpl惯用手法</code>（见 <a href="http://herbsutter.com/gotw/_100" target="_blank" rel="external">GotW #100</a>）：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++11 Pimpl idiom: header file</span></span><br><span class="line"><span class="keyword">class</span> widget &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    widget();</span><br><span class="line">    <span class="comment">// ... (see GotW #100) ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> impl;</span><br><span class="line">    unique_ptr&lt;impl&gt; pimpl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implementation file</span></span><br><span class="line"><span class="keyword">class</span> widget::impl &#123; <span class="comment">/*...*/</span> &#125;;</span><br><span class="line"></span><br><span class="line">widget::widget(): pimpl&#123; <span class="keyword">new</span> impl&#123; <span class="comment">/*...*/</span>&#125; &#125; &#123; &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>使用<code>shared_ptr</code>明确共享所有权。更喜欢使用<code>make_shared</code>来有效的创建共享对象。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line">widget* pw = <span class="keyword">new</span> widget();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> pw;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">auto</span> pw = make_shared&lt;widget&gt;();</span><br></pre></td></tr></table></figure>
<p>使用<code>weak_ptr</code>打引用破循环和明确可选性（例：实现一个对象缓存）。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.. C++<span class="number">11</span></span><br><span class="line"><span class="keyword">class</span> gadget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> widget &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;gadget&gt; g; <span class="comment">// if shared ownership</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> gadget &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    weak_ptr&lt;widget&gt; w;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果你知道另一个对象比你的生存期长，而且你需要观察它，那么使用(non-owing)原始指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">class</span> node &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;unique_ptr&lt;node&gt; &gt; children;</span><br><span class="line">    node* parent;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="nullptr">nullptr</h2><p>始终使用<code>nullptr</code>作为空指针的值，绝不使用模棱两可的字面量<code>0</code>或者<code>NULL</code>宏，因为它们可以是一个整形或指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="keyword">nullptr</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Range_for">Range for</h2><p>使用基于范围的<code>for</code>循环的方式来对一个范围内的元素进行顺序访问是非常方便的。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator i = v.begin(); i != v.end(); ++i) &#123;</span><br><span class="line">    total += *i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> d: v) &#123;</span><br><span class="line">    total += d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Nonmember_begin_and_end">Nonmember begin and end</h2><p>总是使用非成员的<code>begin(x)</code>和<code>end(x)</code>（而不是<code>x.begin()</code>和<code>x.end()</code>）。因为<code>begin(x)</code>和<code>end(x)</code>是可扩展的，可以和所有的容器类型（甚至是数组）一起使用，而且不仅仅是容器，还包括那些遵循<code>STL</code>风格，实现了<code>x.begin()</code>和<code>x.end()</code>成员函数的类型。</p>
<p>如果你使用了非<code>STL</code>的集合类型，它们提供了迭代，但不是<code>STL</code>风格的<code>x.begin()</code>和<code>x.end()</code>，那么你可以编写你自己的非成员的<code>begin(x)</code>和<code>end(x)</code>来重载该类型。这样你就可以使用如上所示的<code>STL</code>容器的相同编码风格来遍历该类型。<code>C++11</code>的标准作出了榜样：C数组就是这种类型，<code>C++11</code>标准给它提供了<code>begin</code>和<code>end</code>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++98</span></span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line">sort(&amp;a[<span class="number">0</span>], &amp;a[<span class="number">0</span>] + <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line">sort(begin(v), end(v));</span><br><span class="line">sort(begin(a), end(a));</span><br></pre></td></tr></table></figure>
<h2 id="Lambda_Functions_and_Algorithms">Lambda Functions and Algorithms</h2><p>Lambda表达式是一个可以改变游戏规则的改变，它会经常会改变你写代码的方式，使之更优雅和更快速。Lambda表达式使现有的<code>STL</code>算法的可用性提升了100倍。新的C++库的设计越来越多的假设Lambda表达式是可用的（例：<code>PPL</code>），而且某些甚至要求你编写Lambda表达式来使用库（例：<code>C++ AMP</code>）。</p>
<p>这是一个简单的例子：在<code>v</code>中找到第一个大于<code>x</code>并小于<code>y</code>的元素。在<code>C++11</code>中，最简单的和最整洁的代码是使用标准算法。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98: write a naked loop (using std::find_if is impractically difficult)</span></span><br><span class="line"><span class="keyword">for</span>(; i != v.end(); ++i) &#123;</span><br><span class="line">  <span class="keyword">if</span>(*i &gt; x &amp;&amp; *i &lt; y) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11: use std::find_if</span></span><br><span class="line"><span class="keyword">auto</span> i = find_if(begin(v), end(v), [=](<span class="keyword">int</span> i) &#123;<span class="keyword">return</span> i &gt; x &amp;&amp; i &lt; y;&#125;);</span><br></pre></td></tr></table></figure>
<p>你是否想要一个循环或类似的语言特性（但语言并没有提供）？并不需要付出多大的努力，只要把它写成一个模板函数（算法库），利用lambda表达式你总是可以如同使用语言特性一样便利的使用它。而且具有更大的灵活性，因为它真的只是一个库，而不是一个天生的语言特性。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line">lock(mut_x) &#123;</span><br><span class="line">  ... use x ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 without lambdas: already nice, and more flexible (e.g., can use timeouts, other options)</span></span><br><span class="line">&#123;</span><br><span class="line">  lock_guard&lt;mutex&gt; hold &#123;mut_x&#125;;</span><br><span class="line">  ... use x ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 with lambdas, and a helper algorithm: C# syntax in C++</span></span><br><span class="line"><span class="comment">// Algorithm: template&lt;typename T&gt; void lock(T&amp; t, F f) &#123;lock_guard hold(t); f();&#125;</span></span><br><span class="line">lock(mut_x, [&amp;]&#123;</span><br><span class="line">  ... use x ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>要熟悉lambda表达式，你将会大量的使用它们，不仅仅是在C++中—它们已经在几种流行的主要语言中被支持和广泛使用。一个很好的起点是我在<code>PDC 2010</code>上的演讲：<a href="http://herbsutter.com/2010/10/30/pdc-languages-panel-andshortened-lambdas-talk" target="_blank" rel="external">Lambdas, Lambdas Everywhere</a>。</p>
<h2 id="Move_/_&amp;&amp;">Move / &amp;&amp;</h2><p>移动是作为拷贝优化的一个最好的思想，虽然它也可以做其他的事情，如：完美转发。</p>
<p>移动语义使我们设计<code>API</code>的方式发生了改变。我们将会设计出更多的返回值对象的接口。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98: alternatives to avoid copying</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;* make_big_vector(); <span class="comment">// option 1: return by pointer: no copy, but don't forget to delete</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;* result = make_big_vector();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_big_vector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; out)</span></span>; <span class="comment">// option2: pass out by reference: no copy, but caller needs a named object</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">make_big_vector(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11: move</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; make_big_vector(); <span class="comment">// usuall sufficient for 'caller-allocated out' situations</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> result = make_big_vector(); <span class="comment">// guaranteed not to copy the vector</span></span><br></pre></td></tr></table></figure>
<p>当你要做一些比拷贝更有效率的事情的时候，为你的类型启用移动语义。</p>
<h2 id="Uniform_Initialization_and_Initializer_Lists">Uniform Initialization and Initializer Lists</h2><p>没有改变的是：当初始化一个局部变量时，且它的类型是非<code>POD</code>或<code>auto</code>时，继续使用熟悉的 <code>=</code> 语法，而不用额外的<code>{ }</code>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98 or C++11</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">42</span>;      <span class="comment">// still fine, as always</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="keyword">auto</span> x = begin(v); <span class="comment">// no narrowing or non-initialization is possible</span></span><br></pre></td></tr></table></figure>
<p>在其它情况下，特别是你以前在构造对象时经常使用<code>( )</code>时，应该使用<code>{ }</code>代替。使用大括号可以避免几个潜在的问题：你不会意外的获得变窄类型转换（例：<code>flot</code>到<code>int</code>）；你不会偶尔不小心拥有未初始化的<code>POD</code>成员变量或数组；你会避免<code>C++98</code>给你带来的偶然惊喜：由于在C++语法中声明某凌两可（Scott Meyers 的一句名言：”C++’s most vexing<br>parse.”），你实际上声明了一个函数而不是一个变量，但还是能通过编译。在新的风格中没有这样的烦恼。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line"><span class="function">rectangle <span class="title">w</span><span class="params">(origin()</span>, <span class="title">extents</span><span class="params">()</span>)</span>;  <span class="comment">// oops, declares a function, if origin and extents are types</span></span><br><span class="line"><span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c(<span class="number">2.71828</span>, <span class="number">3.14159</span>);</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) v.push_back(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line">rectangle w &#123;origin(), extents()&#125;;</span><br><span class="line"><span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c &#123;<span class="number">2.71828</span>, <span class="number">3.14159</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>新的<code>{ }</code>语法在每个地方都工作的很好：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98</span></span><br><span class="line">X::X(<span class="comment">/*...*/</span>): mem1(init1), mem2(init2, init3) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line">X::X(<span class="comment">/*...*/</span>): mem1&#123;init1&#125;, mem2&#123;init2, init3&#125; &#123;<span class="comment">/*...*/</span>&#125;</span><br></pre></td></tr></table></figure>
<p>最后，有些时候只是为了方便，在给函数传递参数时可以不需要临时的类型名。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_rect</span><span class="params">(rectangle)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++98</span></span><br><span class="line">draw_rect(rectangle(myobj.origin, selection.extents));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line">draw_rect(&#123;myobj.origin, selection.extents&#125;);</span><br></pre></td></tr></table></figure>
<p>我不使用大括号的唯一地方是在对非<code>POD</code>变量进行简单初始化的时候，如：<code>auto x = begin(v);</code>，不然它会使代码将变得不必要的丑陋。因为我知道它是一个类类型，所以我知道我不需要担心偶然的变窄类型转换，而且现代的编译器已经例行的执行优化以删去额外的拷贝（或额外的移动，如果类型启用了移动语义）。</p>
<h2 id="And_More">And More</h2><p>现代C++还有<a href="http://www2.research.att.com/~bs/C++0xFAQ.html" target="_blank" rel="external">更多特性</a>。在将来，我打算写一些更深入的文章，关于<code>C++11</code>的这些和其它的我们要去了解和喜欢的特性。</p>
<p>但是现在，这里是我们必须要知道的特性列表。这些特性形成的核心，定义了现代C++的风格，这使得C++代码看起来和执行起来确实如此；你会发现它们在你所将要看到或编写的每一段现代C++代码中会普遍的被使用；使得现代C++是一门整洁、安全和快速的语言，在未来的许多年里我们的行业将会继续严重依赖于它。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>译自：<a href="http://herbsutter.com/elements-of-modern-c-style">http://herbsutter.com/elements-of-modern-c-style</a></p>
<blockquote>
<p>“C++11 feels like a new language.” — Bjarne Stroustrup</p>
</blockquote>
<p><code>C++11</code>标准提供了<a href="http://www2.research.att.com/~bs/C++0xFAQ.html">很多新特性</a>。本文特别的而且仅仅专注于那些使得<code>C++11</code>相比于<code>C++98</code>来说确实感觉像一门新语言的特性，因为：</p>
<ul>
<li>它们改变了编写C++代码时所要使用的风格和惯用手法，通常还包括设计C++库的方式。例如，你将会看到更多的智能指针作为参数和返回值，函数也会通过值的方式返回大对象。</li>
<li>它们被如此普遍的使用，以至于你会在大多数的代码示例中看见它们。例如，几乎在每5行的现代C++代码示例中你就会看见<code>auto</code>的身影。</li>
</ul>
<p><code>C++11</code>的特性也要好好的使用，但先使用好这些，因为它们是使得<code>C++11</code>代码整洁、安全（和现代主流语言一样整洁和安全）和快速的最普遍的特性，再加上C++的传统的，如金属般的性能，使之一如既往的强大。</p>
<p>说明：</p>
<ul>
<li>如同<code>Strunk &amp; White</code>，本文特意专注于简洁的总结指导，而不是为了提供详尽的原理阐述和<code>pro/con</code>分析；这将在其它的文章中探究。</li>
<li>这是一份保持更新的文档。你可以在最后随时间变化和添加的列表中看见。</li>
</ul>]]>
    
    </summary>
    
      <category term="C++11" scheme="http://lyhopq.github.io/tags/C-11/"/>
    
      <category term="翻译" scheme="http://lyhopq.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="C/C++" scheme="http://lyhopq.github.io/categories/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ Has Become More Pythonic]]></title>
    <link href="http://lyhopq.github.io/C-Has-Become-More-Pythonic/"/>
    <id>http://lyhopq.github.io/C-Has-Become-More-Pythonic/</id>
    <published>2015-06-25T11:14:33.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<p>译自：<a href="http://preshing.com/20141202/cpp-has-become-more-pythonic" target="_blank" rel="external">http://preshing.com/20141202/cpp-has-become-more-pythonic</a></p>
<p>近些年C++ 发生了很多变化。最新的两个版本，<code>C++11</code> 和 <code>C++14</code>引入了如此多的新特性，正如<code>Bjarne Stroustrup</code>所说的：<a href="http://www.stroustrup.com/C++11FAQ.html#think" target="_blank" rel="external">“它感觉就像一门新的语言”</a>。</p>
<p>确实是这样。现代C++形成了一种全新的编程风格——使我不得不注意到它带有的更多<code>Python</code>的味道。基范围的<code>for</code>循环、类型推导、vector和map的初始化、lambda表达式。随着你更深入的探索现代C++，你越会发现Python的痕迹在里面。</p>
<p>现代C++直接受Python的影响吗？或者仅仅是Python在C++之前使用了这些设计？由你来判断。</p>
<a id="more"></a>
<h2 id="Literals">Literals</h2><p>Python在2008年引入了<a href="https://docs.python.org/dev/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax" target="_blank" rel="external">二进制字面值</a>。现在<a href="http://en.cppreference.com/w/cpp/language/integer_literal" target="_blank" rel="external"><code>C++14</code>拥有了它们</a>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> primes = <span class="number">0</span>b10100000100010100010100010101100;</span><br></pre></td></tr></table></figure>
<p>Python早在1998年引入了<a href="https://www.python.org/download/releases/1.5/whatsnew/" target="_blank" rel="external">原始字符串字面值</a>，它们在硬编码正则表达式或Windows路径时很方便。<a href="http://en.cppreference.com/w/cpp/language/string_literal" target="_blank" rel="external"><code>C++11</code></a>使用略微不同的语法加入了同样的想法：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* path = <span class="string">R"(c:\this\string\has\backslashes)"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Range-Based_For_Loops">Range-Based For Loops</h2><p>在Python中，<code>for</code>循环总是在一个Python对象上迭代：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myList:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>
<p>与此同时，将近30年，C++只支持C风格的<code>for</code>循环。最终，在<code>C++11</code>中，<a href="http://en.cppreference.com/w/cpp/language/range-for" target="_blank" rel="external">基于范围的<code>for</code>循环</a>被添加：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : myList)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x;</span><br></pre></td></tr></table></figure>
<h2 id="Auto">Auto</h2><p>Python一直是一种动态类型语言。任何地方，你都不用声明变量的类型，因为类型是对象自己的属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">"Hello world!"</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>另一方面，C++不是动态类型的，它是静态类型语言。但是从<code>C++11</code>使用<a href="http://en.cppreference.com/w/cpp/language/auto" target="_blank" rel="external">`auto’</a>关键字进行类型推导以来，你能够看起来像动态类型一样来编写代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x;</span><br></pre></td></tr></table></figure>
<p>当你调用那些被好几种类型重载的函数，例如<code>std::ostream::operator&lt;&lt;</code>，或模板函数的时候，C++就更表现出动态类型语言的特征。<code>C++14</code>更进一步扩充了对<code>auto</code>关键字的支持，增加了对<code>auto</code><a href="http://en.wikipedia.org/wiki/C%2B%2B14#Function_return_type_deduction" target="_blank" rel="external">返回值</a>和<br>lambda函数使用<code>auto</code><a href="http://en.wikipedia.org/wiki/C%2B%2B14#Generic_lambdas" target="_blank" rel="external">参数</a>的支持。</p>
<h2 id="Tuples">Tuples</h2><p>Python几乎从开始就支持<a href="https://docs.python.org/release/1.4/ref/ref3.html" target="_blank" rel="external"><code>tuple</code></a>。当你需要把几个值打包在一起的时候表现的非常友好，而不需要命名一个类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">triple = (<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">print(triple[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>C++在<code>C++11</code>中把<code>tuple</code>添加到了标准库中。在<a href="http://open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1403.pdf" target="_blank" rel="external">这一提议</a>中甚至提到是从Python中得到的灵感：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> triple = <span class="built_in">std</span>::<span class="keyword">make_t</span>uple(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(triple);</span><br></pre></td></tr></table></figure>
<p>Python可以让你解包一个<code>tuple</code>到分开的变量中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x,y,z = triple</span><br></pre></td></tr></table></figure>
<p>你在C++中使用<code>std::tie</code>也可以做到同样的事情：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::tie(x,y,z) = triple;</span><br></pre></td></tr></table></figure>
<h2 id="Uniform_Initialization">Uniform Initialization</h2><p>在Python中，<a href="https://docs.python.org/2/tutorial/introduction.html#lists" target="_blank" rel="external"><code>list</code></a>是一个内建类型。这样，你可以使用单一的表达式来创建一个Python列表：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myList = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">myList.append(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>C++中的<code>std::vetcor</code>是Python列表的最相近的模仿。在<code>C++11</code>中新添加了<a href="http://www.stroustrup.com/C++11FAQ.html#init-list" target="_blank" rel="external">统一初始化</a>，现在也可以让我们使用单一的表达式来创建它们：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> myList = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">myList.push_back(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>在Python中，你也可以使用单一的表达式创建一个<a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" target="_blank" rel="external">字典</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myDict = &#123;<span class="number">5</span>: <span class="string">"foo"</span>, <span class="number">6</span>: <span class="string">"bar"</span>&#125;;</span><br><span class="line">print(myDict[<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<p>同样的，统一初始化也可以工作在C++的<code>std::map</code>和<code>unordered_map</code>：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> myDict = <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span>*&gt;&#123;&#123;<span class="number">5</span>, <span class="string">"foo"</span>&#125;, &#123;<span class="number">6</span>, <span class="string">"bar"</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; myDict[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<h2 id="Lambda_Expressions">Lambda Expressions</h2><p>自从1994年开始Python就支持了<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" target="_blank" rel="external">lambda函数</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myList.sort(key = <span class="keyword">lambda</span> x: abs(x))</span><br></pre></td></tr></table></figure>
<p><a href="http://www.stroustrup.com/C++11FAQ.html#lambda" target="_blank" rel="external">lambda表达式</a>在<code>C++11</code>中被添加：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::sort(myList.begin(), myList.end(), [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">abs</span>(x) &lt; <span class="built_in">std</span>::<span class="built_in">abs</span>(y);&#125;);</span><br></pre></td></tr></table></figure>
<p>在2001年，Python增加了<a href="https://docs.python.org/2/whatsnew/2.2.html#pep-227-nested-scopes" target="_blank" rel="external">静态嵌套作用域</a>，它可以使得lambda函数捕获在外围函数中定义的变量：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(amount)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + amount</span><br><span class="line">...</span><br><span class="line">print(adder(<span class="number">5</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>同样的，C++的lambda表达式支持一套灵活的<a href="http://en.cppreference.com/w/cpp/language/lambda#Lambda_capture" target="_blank" rel="external">捕获规则</a>，使你能够做到相似的事情：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">adder</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [=](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> x + amount;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; adder(<span class="number">5</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Standard_Algorithms">Standard Algorithms</h2><p>Python的内建<code>filter</code>函数使你从列表有选择性的拷贝元素（但推荐使用<a href="https://docs.python.org/3/whatsnew/2.0.html#list-comprehensions" target="_blank" rel="external">列表推导</a>）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = filter(<span class="keyword">lambda</span> x: x &gt;= <span class="number">0</span>, myList)</span><br></pre></td></tr></table></figure>
<p><code>C++11</code>引入了<a href="http://en.cppreference.com/w/cpp/algorithm/copy" target="_blank" rel="external">std::copy_if</a>，它使我们可以使用相似的，几乎是函数式的风格：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> result = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="built_in">std</span>::copy_if(mylist.begin(), myList.end(), <span class="built_in">std</span>::back_inserter(result), [](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> x &gt;= <span class="number">0</span>;&#125;);</span><br></pre></td></tr></table></figure>
<p>其它C++<a href="http://en.cppreference.com/w/cpp/algorithm" target="_blank" rel="external">算法</a>借鉴了Python内建的<code>transform</code>，<code>any_of</code>，<code>all_of</code>，<code>min</code>和<code>max</code>函数。即将到来的<a href="https://github.com/ericniebler/range-v3/blob/master/doc/D4128.md" target="_blank" rel="external">rangs提议</a>将更进一步的简化这些表达式。</p>
<h2 id="Parameter_Packs">Parameter Packs</h2><p>Python在<a href="https://docs.python.org/release/1.5/tut/node29.html" target="_blank" rel="external">1998</a>年开始支持任意参数列表。你可以定义一个函数，它可以接受可变数量的参数。这些参数表现为一个<code>tuple</code>，当把它们传给另一个<br>函数时<code>tuple</code>会被展开：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tuple(*args)</span><br><span class="line">...</span><br><span class="line">triple = foo(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p><code>C++11</code>添加了对<a href="http://www.stroustrup.com/C++11FAQ.html#variadic-templates" target="_blank" rel="external">参数包</a>的支持。不同于C风格的可变参数，它和Python的任意参数列表很像，参数包有一个名字来代表整个参数序列。一个重要的区别在于：C++的参数包在运行时并不表现为一个单一的对象。你只有通过模板元编程技术在在编译时来操纵它们。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... T&gt; <span class="function"><span class="keyword">auto</span> <span class="title">foo</span><span class="params">(T&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::<span class="keyword">make_t</span>uple(args...);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> triple = foo(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<p>并非所有<code>C++11</code>和<code>C++14</code>的新特性都借鉴于Python，但其中很大一部分看起来似乎如此。Python被认为是一个友好的、平易近人的编程语言，或许它的一些魅力已经开始暗淡了？</p>
<p>你觉得如何？C++的这些新特性是否使C++变得更简单、更平易近人或者更富有表达力呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>译自：<a href="http://preshing.com/20141202/cpp-has-become-more-pythonic">http://preshing.com/20141202/cpp-has-become-more-pythonic</a></p>
<p>近些年C++ 发生了很多变化。最新的两个版本，<code>C++11</code> 和 <code>C++14</code>引入了如此多的新特性，正如<code>Bjarne Stroustrup</code>所说的：<a href="http://www.stroustrup.com/C++11FAQ.html#think">“它感觉就像一门新的语言”</a>。</p>
<p>确实是这样。现代C++形成了一种全新的编程风格——使我不得不注意到它带有的更多<code>Python</code>的味道。基范围的<code>for</code>循环、类型推导、vector和map的初始化、lambda表达式。随着你更深入的探索现代C++，你越会发现Python的痕迹在里面。</p>
<p>现代C++直接受Python的影响吗？或者仅仅是Python在C++之前使用了这些设计？由你来判断。</p>]]>
    
    </summary>
    
      <category term="C++11" scheme="http://lyhopq.github.io/tags/C-11/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="翻译" scheme="http://lyhopq.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="C/C++" scheme="http://lyhopq.github.io/categories/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十四) -- 备忘录模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E5%9B%9B)%20--%20%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十四) -- 备忘录模式/</id>
    <published>2015-03-27T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>在不破坏封装性的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后可以将对象恢复到原先保存的状态。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/o_ch14.备忘录模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><a id="more"></a>
<h2 id="实例：">实例：</h2><blockquote>
<p>打游戏一定要存进度</p>
</blockquote>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Memo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> state;</span><br><span class="line">	Memo(<span class="built_in">string</span> state)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;state=state;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Originator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> state;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setMemo</span><span class="params">(Memo *memo)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		state=memo-&gt;state;</span><br><span class="line">	&#125;</span><br><span class="line">	Memo *createMemo()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memo(state);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;state&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;	</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Caretaker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;Memo *&gt; memo;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Memo *memo)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		(<span class="keyword">this</span>-&gt;memo).push_back(memo);</span><br><span class="line">	&#125;</span><br><span class="line">	Memo *getState(<span class="keyword">int</span> i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> memo[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Originator *og=<span class="keyword">new</span> Originator();</span><br><span class="line">	Caretaker *ct=<span class="keyword">new</span> Caretaker(); </span><br><span class="line"></span><br><span class="line">	og-&gt;state=<span class="string">"on"</span>;</span><br><span class="line">	og-&gt;show();	</span><br><span class="line">	ct-&gt;save(og-&gt;createMemo());</span><br><span class="line"></span><br><span class="line">	og-&gt;state=<span class="string">"off"</span>;</span><br><span class="line">	og-&gt;show();</span><br><span class="line">	ct-&gt;save(og-&gt;createMemo());</span><br><span class="line"></span><br><span class="line">	og-&gt;state=<span class="string">"middle"</span>;</span><br><span class="line">	og-&gt;show();</span><br><span class="line">	ct-&gt;save(og-&gt;createMemo());</span><br><span class="line"></span><br><span class="line">	og-&gt;setMemo( ct-&gt;getState(<span class="number">2</span>) );</span><br><span class="line">	og-&gt;show();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.state</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createMemo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Memo(self.state)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMemo</span><span class="params">(self, memo)</span>:</span></span><br><span class="line">        self.state = memo.state</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memo</span>:</span></span><br><span class="line">    state= <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span>:</span></span><br><span class="line">    memos = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, memo)</span>:</span></span><br><span class="line">        self.memos.append(memo)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMemo</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.memos[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    og = Originator()</span><br><span class="line">    ct = Caretaker()</span><br><span class="line"></span><br><span class="line">    og.state=<span class="string">"on"</span></span><br><span class="line">    og.show()</span><br><span class="line">    ct.save(og.createMemo())</span><br><span class="line"></span><br><span class="line">    og.state=<span class="string">"off"</span></span><br><span class="line">    og.show()</span><br><span class="line">    ct.save(og.createMemo())</span><br><span class="line"></span><br><span class="line">    og.state=<span class="string">"middle"</span></span><br><span class="line">    og.show()</span><br><span class="line">    ct.save(og.createMemo())</span><br><span class="line"></span><br><span class="line">    og.setMemo(ct.getMemo(<span class="number">2</span>))</span><br><span class="line">    og.show()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on</span><br><span class="line">off</span><br><span class="line">middle</span><br><span class="line">middle</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>备忘录模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://news.5068.com/upfiles/allimg/120323/1A421K21-0.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>在不破坏封装性的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后可以将对象恢复到原先保存的状态。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/o_ch14.备忘录模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十三) -- 适配器模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%B8%89)%20--%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十三) -- 适配器模式/</id>
    <published>2015-03-21T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个类的接口转换为客户需要的另外一个接口。<code>Adapter</code>模式使得原本由于接口不兼容而不能在一起工作的那些类可以在一起工作。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/适配器模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><a id="more"></a>
<h2 id="实例：">实例：</h2><blockquote>
<p>“在NBA，我需要翻译。” —— 姚明</p>
</blockquote>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	Player(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">defence</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Forwards:<span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Forwards(<span class="built_in">string</span> name):Player(name)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 前锋进攻"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">defence</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 前锋防守"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Center:<span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Center(<span class="built_in">string</span> name):Player(name)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 中锋进攻"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">defence</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 中锋防守"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Backwards:<span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Backwards(<span class="built_in">string</span> name):Player(name)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 后卫进攻"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">defence</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 后卫防守"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ForeignCenter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	ForeignCenter(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">myAttack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 外籍中锋进攻"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">myDefence</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 外籍后卫防守"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Translator:<span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	ForeignCenter *fc;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Translator(<span class="built_in">string</span> name):Player(name)</span><br><span class="line">	&#123;</span><br><span class="line">		fc=<span class="keyword">new</span> ForeignCenter(name); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		fc-&gt;myAttack();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">defence</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		fc-&gt;myDefence();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Player *p1=<span class="keyword">new</span> Center(<span class="string">"巴蒂尔"</span>);</span><br><span class="line">	p1-&gt;attack();</span><br><span class="line">	p1-&gt;defence();</span><br><span class="line">	</span><br><span class="line">	Translator *tl=<span class="keyword">new</span> Translator(<span class="string">"姚明"</span>);</span><br><span class="line">	tl-&gt;attack();</span><br><span class="line">	tl-&gt;defence();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Must Implement me"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Must Implement me"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forwards</span><span class="params">(Player)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Forwards, self).__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 前锋进攻'</span> % self._name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 前锋防守'</span> % self._name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Center</span><span class="params">(Player)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(Center, self).__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">u'%s 中锋进攻'</span> % self._name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 中锋防守'</span> % self._name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForeignCenter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAttack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 外籍中锋进攻'</span> % self._name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myDefence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 外籍中锋防守'</span> % self._name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Translator</span><span class="params">(Player)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._fc = ForeignCenter(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._fc.myAttack()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defence</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._fc.myDefence()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Center(<span class="string">u'巴蒂尔'</span>)</span><br><span class="line">    p1.attack()</span><br><span class="line">    p1.defence()</span><br><span class="line"></span><br><span class="line">    t1 = Translator(<span class="string">u'姚明'</span>)</span><br><span class="line">    t1.attack()</span><br><span class="line">    t1.defence()</span><br></pre></td></tr></table></figure>
<h3 id="Pythonic_实现">Pythonic 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Center</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 中锋进攻'</span> % self._name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 中锋防守'</span> % self._name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForeignCenter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAttack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 外籍中锋进攻'</span> % self._name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myDefence</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'%s 外籍中锋防守'</span> % self._name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, adaptee, **adapted_methods)</span>:</span></span><br><span class="line">        self.adaptee  = adaptee</span><br><span class="line">        self.__dict__.update(adapted_methods)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self.adaptee, attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    players = []</span><br><span class="line">    players.append(Center(<span class="string">u'巴蒂尔'</span>))</span><br><span class="line">    fc = ForeignCenter(<span class="string">u'姚明'</span>)</span><br><span class="line">    players.append(Adapter(fc, attack=fc.myAttack, defence=fc.myDefence))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        player.attack()</span><br><span class="line">        player.defence()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">巴蒂尔 中锋进攻</span><br><span class="line">巴蒂尔 中锋防守</span><br><span class="line">姚明 外籍中锋进攻</span><br><span class="line">姚明 外籍中锋防守</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>适配器模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。<br><code>Pythonic</code>的<code>适配器模式</code>的实现，充分运用了<code>Python</code>的特性，提供了一个高度抽象的适配器：<code>Adapter</code>。让我们看一下<code>Adapter</code>是如何实现： “将一个类的接口转换为客户需要的另外一个接口”的。</p>
<ul>
<li><code>Adaptee</code> 被适配的对象</li>
<li><code>adapted_methods</code> 被适配的方法。由客户指定<code>Adaptee</code>的那些方法适配为客户需要的接口。如需要<code>ForeignCenter</code>对象的<code>myAttack</code>方法适配为客户所需要的<code>attack</code>接口。</li>
<li><code>**kwargs</code>是一个正常的python字典类型，允许用户通过键值对来传递参数。如：<code>attack=fc.myAttack, defence=fc.myDefence</code></li>
<li><code>__dict__</code> 和 <code>__getattr__</code>是实现适配的关键。这里的主要作用是更新用户设置的适配方法(<code>adapted_methods</code>)到适配器(<code>Adapter</code>)的方法字典中，用户未设置的方法仍然使用被适配对象(<code>adaptee</code>)的方法。这两个东西是<code>Python</code>中面向对象的关键，在前面的帖子中已经介绍过了，在此不在赘述。</li>
</ul>
<p><img src="http://image.suning.cn/uimg/sop/commodity/201406191019167208_x.jpg" alt=""></p>
<p>请找出上图中那个东东是“适配器”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个类的接口转换为客户需要的另外一个接口。<code>Adapter</code>模式使得原本由于接口不兼容而不能在一起工作的那些类可以在一起工作。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/适配器模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十二) -- 状态模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%BA%8C)%20--%20%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十二) -- 状态模式/</id>
    <published>2015-03-12T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。 </p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/状态模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><a id="more"></a>
<h2 id="实例：">实例：</h2><blockquote>
<p>程序员 的一天</p>
</blockquote>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Work;</span><br><span class="line"><span class="keyword">class</span> State;</span><br><span class="line"><span class="keyword">class</span> ForenonnState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeProgram</span><span class="params">(Work*)</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Work</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    State *current;</span><br><span class="line">    Work();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeProgram</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        current-&gt;writeProgram(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> EveningState:<span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeProgram</span><span class="params">(Work *w)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前时间: "</span>&lt;&lt;w-&gt;hour&lt;&lt;<span class="string">"点 "</span>&lt;&lt;<span class="string">"心情很好，在看《天天向上》，收获很大！"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AfternoonState:<span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeProgram</span><span class="params">(Work *w)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w-&gt;hour&lt;<span class="number">19</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前时间: "</span>&lt;&lt;w-&gt;hour&lt;&lt;<span class="string">"点 "</span>&lt;&lt;<span class="string">"下午午睡后，工作还是精神百倍!"</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w-&gt;current=<span class="keyword">new</span> EveningState();</span><br><span class="line">            w-&gt;writeProgram();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ForenonnState:<span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeProgram</span><span class="params">(Work *w)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w-&gt;hour&lt;<span class="number">12</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前时间: "</span>&lt;&lt;w-&gt;hour&lt;&lt;<span class="string">"点 "</span>&lt;&lt;<span class="string">"上午工作精神百倍!"</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w-&gt;current=<span class="keyword">new</span> AfternoonState();</span><br><span class="line">            w-&gt;writeProgram();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Work::Work()</span><br><span class="line">&#123;</span><br><span class="line">    current=<span class="keyword">new</span> ForenonnState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Work *w=<span class="keyword">new</span> Work();</span><br><span class="line">    w-&gt;hour=<span class="number">9</span>;</span><br><span class="line">    w-&gt;writeProgram();</span><br><span class="line">    w-&gt;hour=<span class="number">14</span>;</span><br><span class="line">    w-&gt;writeProgram();</span><br><span class="line">    w-&gt;hour=<span class="number">21</span>;</span><br><span class="line">    w-&gt;writeProgram();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeProgram</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Must Implement me"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForenonnState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeProgram</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> w.hour &lt; <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"当前时间: %s点 上午工作精神百倍!"</span> % w.hour</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            w.current = AfternoonState()</span><br><span class="line">            w.writeProgram()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfternoonState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeProgram</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> w.hour &lt; <span class="number">19</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"当前时间: %s点 下午午睡后，工作还是精神百倍!"</span> % w.hour</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            w.current = EveningState()</span><br><span class="line">            w.writeProgram()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EveningState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeProgram</span><span class="params">(self, w)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"当前时间: %s点 心情很好，在看《天天向上》，收获很大！"</span> % w.hour</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.hour = <span class="number">9</span></span><br><span class="line">        self.current = ForenonnState()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.current = state</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeProgram</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.current.writeProgram(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mywork = Work()</span><br><span class="line">    mywork.hour = <span class="number">9</span></span><br><span class="line">    mywork.writeProgram()</span><br><span class="line">    mywork.hour = <span class="number">14</span></span><br><span class="line">    mywork.writeProgram()</span><br><span class="line">    mywork.hour = <span class="number">21</span></span><br><span class="line">    mywork.writeProgram()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前时间: <span class="number">9</span>点 上午工作精神百倍!</span><br><span class="line">当前时间: <span class="number">14</span>点 下午午睡后，工作还是精神百倍!</span><br><span class="line">当前时间: <span class="number">21</span>点 心情很好，在看《天天向上》，收获很大！</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>状态模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://i1.brcdn.cn/download/2012/02/02/baoruan.com_53889ae89abab9bda.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。 </p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/状态模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十一) -- 抽象工厂模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81%E4%B8%80)%20--%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十一) -- 抽象工厂模式/</id>
    <published>2015-03-06T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的类。</p>
<h2 id="类图：">类图：</h2></blockquote>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/o_ch11.抽象工厂模式.png" alt=""></p>
<h2 id="类型：创建型">类型：创建型</h2><a id="more"></a>
<h2 id="实例：">实例：</h2><blockquote>
<p>提供对不同的数据库访问的支持</p>
</blockquote>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IUser</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SqlUser:<span class="keyword">public</span> IUser</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在sql中返回user"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在sql中设置user"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AccessUser:<span class="keyword">public</span> IUser</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在Access中返回user"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在Access中设置user"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IDepartment</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">getDepartment</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SqlDepartment:<span class="keyword">public</span> IDepartment</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDepartment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在sql中返回Department"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在sql中设置Department"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AccessDepartment:<span class="keyword">public</span> IDepartment</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDepartment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在Access中返回Department"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"在Access中设置Department"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> IUser *createUser()=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> IDepartment *createDepartment()=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SqlFactory:<span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    IUser *createUser() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlUser();</span><br><span class="line">    &#125;</span><br><span class="line">    IDepartment *createDepartment() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlDepartment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AccessFactory:<span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    IUser *createUser()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccessUser();</span><br><span class="line">    &#125;</span><br><span class="line">    IDepartment *createDepartment() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccessDepartment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    IFactory *factory=<span class="keyword">new</span> SqlFactory();</span><br><span class="line">    IUser *user = user=factory-&gt;createUser();</span><br><span class="line">    IDepartment * department = factory-&gt;createDepartment();</span><br><span class="line">    </span><br><span class="line">    user-&gt;getUser();</span><br><span class="line">    user-&gt;setUser();</span><br><span class="line">    department-&gt;getDepartment();</span><br><span class="line">    department-&gt;setDepartment();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlUser</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在sql中返回user"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在sql中设置user"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessUser</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在Access中返回user"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在Access中设置user"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDepartment</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在sql中返回Department"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在sql中设置Department"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessDepartment</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在Access中返回Department"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"在Access中设置Department"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlFactory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> SqlUser()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> SqlDepartment()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessFactory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> AccessUser()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createDepartment</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> AccessDepartment()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    factory = SqlFactory()</span><br><span class="line">    user = factory.createUser()</span><br><span class="line">    department = factory.createDepartment()</span><br><span class="line"></span><br><span class="line">    user.getUser()</span><br><span class="line">    user.setUser()</span><br><span class="line">    department.getDepartment()</span><br><span class="line">    department.setDepartment()</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>Python</code>实现的抽象工厂模式相比与<code>C++</code>来说并没有什么显著特点。<code>抽象工厂模式</code>可以结合<code>简单工厂</code>加<code>反射</code>写出更简洁、灵活的客户端代码，有兴趣的同学自己尝试一下。</p>
<p><code>Python</code>的抽象工厂模式实现比<code>C++</code>版本简洁了不少，这得益于<code>Python</code>的<code>鸭子类型</code>。有关<code>鸭子类型</code>详见：《当DP遇见Py(五) — 工厂方法模式》。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的类。</p>
<h2 id="类图：">类图：</h2></blockquote>
<p><img src="http://78rbbi.com1.z0.glb.clouddn.com/o_ch11.抽象工厂模式.png" alt=""></p>
<h2 id="类型：创建型">类型：创建型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(十) -- 观察者模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%8D%81)%20--%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(十) -- 观察者模式/</id>
    <published>2015-02-28T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>定义了一种一对多的依赖关系，让多个观察对象同时监听一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象,，使它们能够自动更新自己。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/观察者模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2><a id="more"></a>
<h2 id="实例：偷懒员工“观察”老板">实例：偷懒员工“观察”老板</h2><h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;list&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    Subject *sub;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Observer(<span class="built_in">string</span> name, Subject *sub)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;sub=sub;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> StockObserver:<span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    StockObserver(<span class="built_in">string</span> name, Subject *sub):Observer(name,sub)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NBAObserver:<span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NBAObserver(<span class="built_in">string</span> name,Subject *sub):Observer(name,sub)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;Observer*&gt; observers;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> action;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer*)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer*)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Secretary:<span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer *observer)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        observers.push_back(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer *observer)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">list</span>&lt;Observer *&gt;::iterator iter=observers.begin();</span><br><span class="line">        <span class="keyword">while</span>(iter!=observers.end())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((*iter)==observer)</span><br><span class="line">            &#123;</span><br><span class="line">                observers.erase(iter);</span><br><span class="line">            &#125;</span><br><span class="line">            ++iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="built_in">list</span>&lt;Observer *&gt;::iterator iter=observers.begin();</span><br><span class="line">        <span class="keyword">while</span>(iter!=observers.end())</span><br><span class="line">        &#123;</span><br><span class="line">            (*iter)-&gt;update();</span><br><span class="line">            ++iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StockObserver::update()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 收到消息："</span>&lt;&lt;sub-&gt;action&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(sub-&gt;action==<span class="string">"梁所长来了!"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"我马上关闭股票，装做很认真工作的样子！"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NBAObserver::update()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">" 收到消息："</span>&lt;&lt;sub-&gt;action&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(sub-&gt;action==<span class="string">"梁所长来了!"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"我马上关闭NBA，装做很认真工作的样子！"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Subject *dwq=<span class="keyword">new</span> Secretary();</span><br><span class="line">    Observer *xs=<span class="keyword">new</span> NBAObserver(<span class="string">"xiaoshuai"</span>,dwq);</span><br><span class="line">    Observer *zy=<span class="keyword">new</span> NBAObserver(<span class="string">"zouyue"</span>,dwq);</span><br><span class="line">    Observer *lm=<span class="keyword">new</span> StockObserver(<span class="string">"limin"</span>,dwq);</span><br><span class="line"></span><br><span class="line">    dwq-&gt;attach(xs);</span><br><span class="line">    dwq-&gt;attach(zy);</span><br><span class="line">    dwq-&gt;attach(lm);</span><br><span class="line"></span><br><span class="line">    dwq-&gt;action=<span class="string">"去吃饭了！"</span>;</span><br><span class="line">    dwq-&gt;notify();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">    dwq-&gt;action=<span class="string">"梁所长来了!"</span>;</span><br><span class="line">    dwq-&gt;notify();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._observers = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attach</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> observer <span class="keyword">not</span> <span class="keyword">in</span> self._observers:</span><br><span class="line">            self._observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._observers.remove(observer)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, modifier=None)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> self._observers:</span><br><span class="line">            <span class="keyword">if</span> modifier != observer:</span><br><span class="line">                observer.update()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secretary</span><span class="params">(Subject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        super(Secretary, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sub)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._sub = sub</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Must Implement me"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockObserver</span><span class="params">(Observer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sub)</span>:</span></span><br><span class="line">        super(StockObserver, self).__init__(name, sub)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s 收到消息：%s'</span> % (self._name, self._sub.action)</span><br><span class="line">        <span class="keyword">if</span> self._sub.action == <span class="string">"梁所长来了!"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'我马上关闭股票，装做很认真工作的样子！'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NBAObserver</span><span class="params">(Observer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sub)</span>:</span></span><br><span class="line">        super(NBAObserver, self).__init__(name, sub)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s 收到消息：%s'</span> % (self._name, self._sub.action)</span><br><span class="line">        <span class="keyword">if</span> self._sub.action == <span class="string">"梁所长来了!"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'我马上关闭NBA，装做很认真工作的样子！'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dwq = Secretary()</span><br><span class="line">    xs = NBAObserver(<span class="string">"xiaoshuai"</span>, dwq)</span><br><span class="line">    zy = NBAObserver(<span class="string">"zouyue"</span>, dwq)</span><br><span class="line">    lm = StockObserver(<span class="string">"limin"</span>, dwq)</span><br><span class="line"></span><br><span class="line">    dwq.attach(xs)</span><br><span class="line">    dwq.attach(zy)</span><br><span class="line">    dwq.attach(lm)</span><br><span class="line"></span><br><span class="line">    dwq.action = <span class="string">"去吃饭了！"</span></span><br><span class="line">    dwq.notify()</span><br><span class="line"></span><br><span class="line">    dwq.action = <span class="string">"梁所长来了!"</span></span><br><span class="line">    dwq.notify()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xiaoshuai 收到消息：去吃饭了！</span><br><span class="line">zouyue 收到消息：去吃饭了！</span><br><span class="line">limin 收到消息：去吃饭了！</span><br><span class="line">xiaoshuai 收到消息：梁所长来了!</span><br><span class="line">我马上关闭NBA，装做很认真工作的样子！</span><br><span class="line">zouyue 收到消息：梁所长来了!</span><br><span class="line">我马上关闭NBA，装做很认真工作的样子！</span><br><span class="line">limin 收到消息：梁所长来了!</span><br><span class="line">我马上关闭股票，装做很认真工作的样子！</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>观察者模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://doc.okbase.net/picture/addon/2013/08/04/A004202772-20994.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>定义了一种一对多的依赖关系，让多个观察对象同时监听一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象,，使它们能够自动更新自己。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/观察者模式.png" alt=""></p>
<h2 id="类型：行为型">类型：行为型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(九) -- 建造者模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E4%B9%9D)%20--%20%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(九) -- 建造者模式/</id>
    <published>2015-02-07T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/建造者模式.png" alt=""></p>
<h2 id="类型：创建型">类型：创建型</h2><a id="more"></a>
<h2 id="实例：“画”出一个四肢健全（头身手腿）的小人">实例：“画”出一个四肢健全（头身手腿）的小人</h2><h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createHead</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createHand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createBody</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createFoot</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ThinPerson:<span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createHead</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"thin head"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createHand</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"thin hand"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createBody</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"thin body"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createFoot</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"thin foot"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> FatPerson:<span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createHead</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fat head"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createHand</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fat hand"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createBody</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fat body"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">createFoot</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fat foot"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Director</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Person *p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Director(Person *temp)</span><br><span class="line">	&#123;</span><br><span class="line">		p=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		p-&gt;createHead();</span><br><span class="line">		p-&gt;createHand();</span><br><span class="line">		p-&gt;createBody();</span><br><span class="line">		p-&gt;createFoot();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Person *p=<span class="keyword">new</span> FatPerson();</span><br><span class="line">	Director *d= <span class="keyword">new</span> Director(p);</span><br><span class="line">	d-&gt;create();</span><br><span class="line">	<span class="keyword">delete</span> d;</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHead</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateBody</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateFoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThinPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHead</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thin head"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thin hand"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateBody</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thin body"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateFoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thin foot"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThickPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHead</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thick head"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateHand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thick hand"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateBody</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thick body"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CreateFoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"thick foot"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,temp)</span>:</span></span><br><span class="line">        self.p = temp</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Create</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p.CreateHead()</span><br><span class="line">        self.p.CreateBody()</span><br><span class="line">        self.p.CreateHand()</span><br><span class="line">        self.p.CreateFoot()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = ThickPerson()</span><br><span class="line">    d = Director(p)</span><br><span class="line">    d.Create()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thick head</span><br><span class="line">thick body</span><br><span class="line">thick hand</span><br><span class="line">thick foot</span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>创建者模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://www.tgmj.net/images/cp441/1.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/建造者模式.png" alt=""></p>
<h2 id="类型：创建型">类型：创建型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当DP遇见Py(八) -- 外观模式]]></title>
    <link href="http://lyhopq.github.io/%E5%BD%93DP%E9%81%87%E8%A7%81Py/%E5%BD%93DP%E9%81%87%E8%A7%81Py(%E5%85%AB)%20--%20%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lyhopq.github.io/当DP遇见Py/当DP遇见Py(八) -- 外观模式/</id>
    <published>2015-01-30T16:00:00.000Z</published>
    <updated>2016-01-05T12:20:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/外观模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2><a id="more"></a>
<h3 id="C++_实现">C++ 实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Sub1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"子系统的方法 1"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Sub2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"子系统的方法 2"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Sub3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"子系统的方法 3"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Facade</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Sub1 *s1;</span><br><span class="line">	Sub2 *s2;</span><br><span class="line">	Sub3 *s3;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Facade()</span><br><span class="line">	&#123;</span><br><span class="line">		s1=<span class="keyword">new</span> Sub1();</span><br><span class="line">		s2=<span class="keyword">new</span> Sub2();</span><br><span class="line">		s3=<span class="keyword">new</span> Sub3();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		s1-&gt;f1();</span><br><span class="line">		s2-&gt;f2();</span><br><span class="line">		s3-&gt;f3();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Facade *f=<span class="keyword">new</span> Facade();</span><br><span class="line">	f-&gt;method();s</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_实现">Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"子系统的方法 1"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"子系统的方法 2"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"子系统的方法 3"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.s1 = Sub1()</span><br><span class="line">        self.s2 = Sub2()</span><br><span class="line">        self.s3 = Sub3()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.s1.f1()</span><br><span class="line">        self.s2.f2()</span><br><span class="line">        self.s3.f3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    facade = Facade()</span><br><span class="line">    facade.method()</span><br></pre></td></tr></table></figure>
<h3 id="执行结果：">执行结果：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子系统的方法 <span class="number">1</span></span><br><span class="line">子系统的方法 <span class="number">2</span></span><br><span class="line">子系统的方法 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="Tips:">Tips:</h2><p><code>外观模式</code>的<code>Python</code>实现没有什么特点，在这就不在赘述了。</p>
<p><img src="http://zj.sinaimg.cn/2012/0713/S64582T1342155984801.jpg" alt=""><br><img src="http://www.pp3.cn/uploads/allimg/111215/1116342X6-3.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义：">定义：</h2><blockquote>
<p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
</blockquote>
<h2 id="类图：">类图：</h2><p><img src="http://78rbbi.com1.z0.glb.clouddn.com/外观模式.png" alt=""></p>
<h2 id="类型：结构型">类型：结构型</h2>]]>
    
    </summary>
    
      <category term="C++" scheme="http://lyhopq.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://lyhopq.github.io/tags/DP/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://lyhopq.github.io/categories/Python/"/>
    
  </entry>
  
</feed>